WEBVTT FILE

1
00:00:00.000 --> 00:00:11.000
hello and thank you everybody for coming
my name is Jeff lion I lead the AWS d
das response team who is responsible for

2
00:00:11.000 --> 00:00:20.000
protecting AWS amazon com it Ares
against the availability impact of
distributed denial-of-service attacks

3
00:00:20.000 --> 00:00:30.000
I'm joined by my colleague andrew
higgins a security solutions architect
and also two of our customers I have

4
00:00:30.000 --> 00:00:39.000
David grandpa with type Frankcom and
also Adrian newbie with crown peek I
know that protecting the availability of

5
00:00:39.000 --> 00:00:47.000
your applications is of critical
importance to every one of you I also
know that for many the recent trend in

6
00:00:47.000 --> 00:00:57.000
IOT source distributed denial-of-service
attacks is a significant concern today I
want to give you the confidence that you

7
00:00:57.000 --> 00:01:06.000
can mitigate these attacks and protect
your applications in the cloud and
despite the recent increase in size and

8
00:01:06.000 --> 00:01:13.000
frequency we continue to see these
attacks across five major vectors and
we're going to go into those momentarily

9
00:01:13.000 --> 00:01:22.000
and we're going to talk about those in
terms of four major use cases Adrian and
I are going to talk about web use cases

10
00:01:22.000 --> 00:01:32.000
and Andrew and David are going to talk
about easy to use cases so let's briefly
go over the different attacks and that

11
00:01:32.000 --> 00:01:40.000
will allow us to have a deeper
discussion about the methods that we're
going to use to mitigate them so

12
00:01:40.000 --> 00:01:49.000
traditionally we've talked about DDoS
attacks in terms of layer 3 layer 4 or
layer 7 attacks but I find these things

13
00:01:49.000 --> 00:01:57.000
to be somewhat esoteric instead I want
to talk about them simply as attacks
that cause large volumes of traffic

14
00:01:57.000 --> 00:02:06.000
large volumes of connections or large
volumes of requests in the first attack
that we're going to talk about is a UDP

15
00:02:06.000 --> 00:02:15.000
reflection attack this is the most
common attack that we see on AWS and
it's also my favorite and i'll tell you

16
00:02:15.000 --> 00:02:22.000
why i like it because in order to
generate this attack an attacker has to
spoof your IP send it out to tons of

17
00:02:22.000 --> 00:02:30.000
servers across the internet and cause
those servers to reply with the flood of
traffic this gives us a really clear

18
00:02:30.000 --> 00:02:36.000
signature on which to mitigate the
attack and we know that the traffic that
we're receiving is not spoofed and

19
00:02:36.000 --> 00:02:45.000
here's just an example of that traffic
and we see that it's on the UDP protocol
that it has a clear signature in this

20
00:02:45.000 --> 00:02:54.000
case port 1900 which is ssdp in a large
packet size so when we see this traffic
we know that we have a few attributes on

21
00:02:54.000 --> 00:03:03.000
which we can mitigate using something
like an apple or a shaper for example
and we also have UDP floods these are

22
00:03:03.000 --> 00:03:10.000
pretty similar but they come they're a
little bit more ambiguous and they come
from the ephemeral port range because

23
00:03:10.000 --> 00:03:17.000
somebody is just spoofing packets and
sending them at your application and we
see that here with the different ports

24
00:03:17.000 --> 00:03:27.000
that attack is also fairly easy to
mitigate if you don't require UDP
traffic but then that brings us to TCP

25
00:03:27.000 --> 00:03:34.000
syn floods which is probably the next
most common that we see these attacks
are a little bit more difficult in that

26
00:03:34.000 --> 00:03:40.000
they're a flood of traffic and they're
also a flood of system connections so
the attacker is not only trying to

27
00:03:40.000 --> 00:03:46.000
generate a large volume of traffic but
they're trying to exhaust the state
table of your server or your firewall

28
00:03:46.000 --> 00:03:56.000
for example and here's what that looks
like in a net stat so we see that it's
TCP and we see that there are half open

29
00:03:56.000 --> 00:04:02.000
connections so we have a clear signature
it's just a little bit more difficult to
do something about but I'm going to get

30
00:04:02.000 --> 00:04:11.000
to that shortly and then we have web
application layer attacks these are a
bit more challenging even than the TCP

31
00:04:11.000 --> 00:04:18.000
syn flood and the reason is that these
attacks look just like your legitimate
traffic so one method that you can use

32
00:04:18.000 --> 00:04:24.000
to mitigate it is if you do have a
signature something in the header or the
source IP address then you can block on

33
00:04:24.000 --> 00:04:29.000
that
but if you don't you want to use your
wife to do something like rate-based

34
00:04:29.000 --> 00:04:36.000
blacklisting where you define some
parameters of what malicious traffic
looks like and then automatically block

35
00:04:36.000 --> 00:04:47.000
and then we have dns query floods dns
query floods are very similar to web
application layer attacks in that they

36
00:04:47.000 --> 00:04:54.000
are many legitimate requests in this
case legitimate DNS requests so there's
different ways that we can deal with

37
00:04:54.000 --> 00:05:00.000
this if it's just a regular DNS request
and it's coming from a source that we
know is malicious we can just block it

38
00:05:00.000 --> 00:05:10.000
but sometimes that's not always the case
sometimes the request comes from a known
good dns server so what do we do about

39
00:05:10.000 --> 00:05:18.000
that we look for something called a
cache busting attribute because what the
attackers trying to do is to get through

40
00:05:18.000 --> 00:05:25.000
that recursive DNS and compel your
authoritative dns to respond to the
request so when we see this randomness

41
00:05:25.000 --> 00:05:34.000
we know that probably wasn't a real DNS
request and we're going to go ahead and
block it so let's look more specifically

42
00:05:34.000 --> 00:05:51.000
about how we do this on AWS
conventionally if you wanted to mitigate
an attack on your own data center you

43
00:05:51.000 --> 00:05:58.000
could do a couple of things you could
deploy your own DDoS mitigation systems
or you could use a commercial deedle

44
00:05:58.000 --> 00:06:07.000
mitigation service these services allow
you to route your traffic through their
cloud externally scrub the bad traffic

45
00:06:07.000 --> 00:06:14.000
and then let the good traffic through to
your service the challenge with this is
that it can add additional latency and

46
00:06:14.000 --> 00:06:20.000
it can add additional points of failure
if that service were to fail or even if
any intermediate network were to fail

47
00:06:20.000 --> 00:06:30.000
while it was handling your traffic on
AWS we wanted to build d loss mitigation
that was built into the AWS global

48
00:06:30.000 --> 00:06:39.000
infrastructure we wanted fast mitigation
without external routing so we wanted to
minimize that latency impact and we

49
00:06:39.000 --> 00:06:47.000
wanted to protect your availability and
also your throughput so let's look
specifically about how we do this on AWS

50
00:06:47.000 --> 00:06:55.000
we found that relying on commercial
systems was a little difficult because
we run into scaling challenges when you

51
00:06:55.000 --> 00:07:02.000
grow at the rate of AWS it's pretty
difficult just to pick up the phone call
a vendor and say I need some huge number

52
00:07:02.000 --> 00:07:09.000
of DDoS mitigation systems we found that
this kind of thing just wasn't practical
for us so instead we built a system

53
00:07:09.000 --> 00:07:17.000
internally that we call Black Watch
Black Watch mitigates very large volume
DDoS attacks and it has three basic

54
00:07:17.000 --> 00:07:24.000
methods it allows only that traffic
that's intended for the service and for
those syn floods it uses a combination

55
00:07:24.000 --> 00:07:32.000
of sin proxy and send cookies to verify
that the connection to the service was a
real connection that we intended and

56
00:07:32.000 --> 00:07:40.000
wasn't from some spoof source and then
we use something called suspicion based
traffic shaving so for example like when

57
00:07:40.000 --> 00:07:48.000
you have a DNS query flood we want a way
of scoring that traffic across multiple
dimensions to know whether we think it's

58
00:07:48.000 --> 00:07:56.000
legitimate where we think it came from a
real user or we think it may have been
part of a DDoS attack so we look at

59
00:07:56.000 --> 00:08:02.000
things like abnormal sources abnormal
abnormal
geo's abnormal important protocols or

60
00:08:02.000 --> 00:08:11.000
other characteristics like the cache
busting for example that we just found
to be odd or unusual and most of all we

61
00:08:11.000 --> 00:08:18.000
leverage the scale of AWS to minimize
false positives so if we're able to we
always just want to let all the traffic

62
00:08:18.000 --> 00:08:25.000
through and we're only going to apply a
mitigation where it counts the most
where we need it to protect the

63
00:08:25.000 --> 00:08:34.000
availability of the service so here's an
example i took this screenshot of a real
attack and you can see that we

64
00:08:34.000 --> 00:08:42.000
identified the data oz because it fell
into one of those low priority bands and
then towards the bottom of the screen

65
00:08:42.000 --> 00:08:48.000
you see all these other colors of
traffic now what's that's telling us is
that the traffic is either most likely

66
00:08:48.000 --> 00:08:55.000
the real traffic you intended towards
your service or maybe there's some data
in there but we found that by d

67
00:08:55.000 --> 00:09:04.000
prioritizing only the most suspicious
traffic we can achieve a very effective
mitigation and ensure that we're not

68
00:09:04.000 --> 00:09:12.000
causing false positives to the service
so let's look at the common use cases
let's look at how do you build

69
00:09:12.000 --> 00:09:22.000
architectures that allow you to take
advantage of these mitigation systems so
a common use case on AWS uses ec2

70
00:09:22.000 --> 00:09:31.000
instances VPC and perhaps an application
load balancer so you're able to take in
significant volumes of traffic towards

71
00:09:31.000 --> 00:09:39.000
your service and distribute those across
ec2 instances and if it was some source
port or protocol that you didn't expect

72
00:09:39.000 --> 00:09:45.000
then you can go ahead and block that
using your host or if it was a protocol
or source you didn't expect you could

73
00:09:45.000 --> 00:09:55.000
block that in your v pc using security
groups or nackles but say there's a DDoS
attack if it's not blocked by your v pc

74
00:09:55.000 --> 00:10:05.000
security group or your Knakal then the
application load balancer is going to
start scaling out to absorb that volume

75
00:10:05.000 --> 00:10:12.000
of traffic and when it gets to be a very
significant volume of traffic we're
going to use our Black Watch system to

76
00:10:12.000 --> 00:10:20.000
mitigate
it and protect the availability of that
load balancer and when you host an AWS

77
00:10:20.000 --> 00:10:27.000
you're not just getting the AWS region
you're not just getting some set of
availability zones rather you're getting

78
00:10:27.000 --> 00:10:34.000
many diverse internet paths that give
you a lot of throughput and a lot of
redundancy too many different internet

79
00:10:34.000 --> 00:10:41.000
exchanges so you can take advantage of
not only the capacity that's available
locally but the capacity that's

80
00:10:41.000 --> 00:10:48.000
available elsewhere out on the internet
but we like to suggest that you take
this a step further and use what we call

81
00:10:48.000 --> 00:10:57.000
a highly resilient web application so
instead of allowing attacks to come to
you and target your origin you can use

82
00:10:57.000 --> 00:11:06.000
services like cloud front route 53 to
push out the distribution of your
application toward the edge that means

83
00:11:06.000 --> 00:11:14.000
getting that application close to your
end user optimizing for availability and
performance and it also allows you to

84
00:11:14.000 --> 00:11:22.000
use the AWS laughs service so if you
have a a set of web requests or some key
that you want to block on you can do

85
00:11:22.000 --> 00:11:28.000
that using the laughs using something
like a string match condition and we
also have something that you can deploy

86
00:11:28.000 --> 00:11:37.000
called AWS wife security automation and
that allows you to define all types of
pre-configured rules to include HTTP

87
00:11:37.000 --> 00:11:48.000
flood protection right there in the AWS
laughs and so instead of asking your
customers to come to you we recommend

88
00:11:48.000 --> 00:11:56.000
that you go to them distribute close to
the source of the traffic and mitigate
the DDoS attacks close to where they

89
00:11:56.000 --> 00:12:03.000
originated and so here on the screen i
just gave some examples of different AWS
regions or different geographic regions

90
00:12:03.000 --> 00:12:11.000
where we have a to this edge of
locations so we have over 60 of these
today so if an attack is originating for

91
00:12:11.000 --> 00:12:18.000
example close to Dublin we're going to
mitigate that using the Blackwatch
capacity in Dublin and likewise for

92
00:12:18.000 --> 00:12:25.000
every single edge location that we have
and that's going to allow you to cut
down the latency of

93
00:12:25.000 --> 00:12:31.000
reading content to your users it's going
to allow you to optimize for throughput
and it's going to keep that D das

94
00:12:31.000 --> 00:12:42.000
traffic far away from your origin and so
at every one of these locations we have
those Black Watch systems on site so

95
00:12:42.000 --> 00:12:49.000
we're not having to distribute those or
distribute the traffic to other
mitigation systems in other geographic

96
00:12:49.000 --> 00:12:59.000
locations and you can see from this map
that we have many of them in many cases
we have many black watch systems in a

97
00:12:59.000 --> 00:13:07.000
single edge location or in a single
transit center serving in a DBS region
so at this time I'd like to take the

98
00:13:07.000 --> 00:13:14.000
opportunity to introduce Adrienne newbie
with crown peek who's going to talk
about how he helped one of his customers

99
00:13:14.000 --> 00:13:26.000
mitigate d-las attacks in the cloud okay
thank you hi everybody those of you at
the back can you put your hands up if

100
00:13:26.000 --> 00:13:37.000
you can hear me excellent so d dos
exciting and cool where everybody wants
to be part of it who knew I've been in

101
00:13:37.000 --> 00:13:45.000
information technology probably close to
30 years and this is the first time I've
ever been with the cool kids for those

102
00:13:45.000 --> 00:13:54.000
of you who don't know the name cram peak
we provide web content management
services to our customers all of our

103
00:13:54.000 --> 00:14:05.000
services run under amazon web services
and our customers use our service to
build deliver and then maintain websites

104
00:14:05.000 --> 00:14:15.000
all around the world all different types
of businesses we have small customers we
have large customers particularly we

105
00:14:15.000 --> 00:14:21.000
have a lot of large customers in
regulated industries and one of the
customers that we've worked with for a

106
00:14:21.000 --> 00:14:31.000
long time is the bank of new york mellon
for those of you who maybe aren't aware
i learned a term a couple of years ago

107
00:14:31.000 --> 00:14:39.000
SiFi systemically important financial
institution a flanch institution that is
so significant to the performance of

108
00:14:39.000 --> 00:14:46.000
it's around the world the there would be
a significant disruption if anything bad
happen to it so we tend to pay attention

109
00:14:46.000 --> 00:14:58.000
when the bank of new york horse and they
are the largest holder of assets under
custody or administration they operate

110
00:14:58.000 --> 00:15:08.000
in hundreds of markets worldwide and
many of the the bank's web sites are
hosted and managed on Crown peak what's

111
00:15:08.000 --> 00:15:16.000
really cool about the bank of new york
is that they really take their role in
the world financial market very

112
00:15:16.000 --> 00:15:25.000
seriously and they are up down and
sideways throughout all of the divisions
of the organization really really

113
00:15:25.000 --> 00:15:34.000
committed to leading the world and being
best in class when it comes to cyber
defense and threat protection and so the

114
00:15:34.000 --> 00:15:39.000
case study that I'm going to talk to you
about today I'm going to walk you
through some of the work that we did

115
00:15:39.000 --> 00:15:50.000
this year actually hooding enhancing the
threat protection was already in place
and demonstrating and proving the kind

116
00:15:50.000 --> 00:16:06.000
of attacks that that infrastructure
could sustain and so Jeff a moment ago
outlined a basic architecture and if if

117
00:16:06.000 --> 00:16:13.000
any of you were here at reinvent a
couple of years ago we were here talking
a little bit about some d dos work that

118
00:16:13.000 --> 00:16:20.000
we've done a couple of years ago and
this was the kind of architecture that
we were working with at the time using

119
00:16:20.000 --> 00:16:29.000
cloud front in front of the the web or
the application server environment to
provide a degree of protection and then

120
00:16:29.000 --> 00:16:37.000
building effective auto scaling behind
the the power pod distribution and that
worked really really well well when we

121
00:16:37.000 --> 00:16:44.000
started working with the bank of new
york and in the couple of years since we
we first started really getting serious

122
00:16:44.000 --> 00:16:51.000
about d das we've been working pretty
closely with AWS and we're really
excited about the new facilities and

123
00:16:51.000 --> 00:16:56.000
take
is that have come in with the
introduction of services such as lambda

124
00:16:56.000 --> 00:17:06.000
such as laughs web application firewall
and we wanted to see what those services
in particular could do to improve the

125
00:17:06.000 --> 00:17:16.000
the response to a cyber threat or a
cyber attack so we also deployed a more
advanced or we call a hardened

126
00:17:16.000 --> 00:17:25.000
architecture which really attempt to
exploit what those services can do and
in this diagram here you can see that

127
00:17:25.000 --> 00:17:32.000
the web application firewall is the key
component that we introduced and what's
actually happening in this in this

128
00:17:32.000 --> 00:17:42.000
picture is as all of the traffic from
the DDoS attack is coming in to the web
application firewall and as traffic gets

129
00:17:42.000 --> 00:17:48.000
passed through the firewall into the
cloud front distribution we're
intercepting the power front logs in

130
00:17:48.000 --> 00:17:58.000
real time sending them to s3 storage and
as they arrive in s3 they trigger lambda
functions and within a lambda function

131
00:17:58.000 --> 00:18:08.000
we can apply all sorts of analysis
pattern recognition aggregate statistics
responses and not only accept or deny

132
00:18:08.000 --> 00:18:15.000
each request as it comes in but actually
modify the behavior of the wife in real
time and I'll show you a little bit how

133
00:18:15.000 --> 00:18:26.000
that works in a moment so the the actual
testing that we structured took place
over a couple of days by the way a tip

134
00:18:26.000 --> 00:18:32.000
for all of you that might want to try
this at home if you even think about
doing this on AWS make sure you pick up

135
00:18:32.000 --> 00:18:38.000
the phone and give a double yes a call
first otherwise you'll find your your
account privileges evaporate very very

136
00:18:38.000 --> 00:18:48.000
quickly because a SS is paying attention
to deduct like behavior these days so
the the basic structure of the testing

137
00:18:48.000 --> 00:18:56.000
that we performed with the bank of new
york was first of all to get a baseline
to kind of get a sense for what kind of

138
00:18:56.000 --> 00:19:02.000
traffic we would have to put into the
front end before the mitigation
strategies that we had in place will

139
00:19:02.000 --> 00:19:09.000
begin to activate so that was our
baseline
using simple HTTP GET requests we also

140
00:19:09.000 --> 00:19:20.000
performed a hulk test for those of you
who aren't familiar with the term Hulk
HTTP unbearable loading which my team

141
00:19:20.000 --> 00:19:27.000
rehearsed me on for several weeks before
I actually got up on stage and they try
said it correctly and we actually worked

142
00:19:27.000 --> 00:19:36.000
with another really cool company in in
this space that really specializes in in
this kind of cyber threat protection and

143
00:19:36.000 --> 00:19:44.000
testing by the name of red wolf and they
actually have taken some of the hulk
testing software that's freely available

144
00:19:44.000 --> 00:19:53.000
on the internet and juiced it up a bit
to add additional attacks in for example
obfuscating the source client doing

145
00:19:53.000 --> 00:20:03.000
forging HTTP referer referral headers
and so on and so forth and then just
because we had some time on our hands we

146
00:20:03.000 --> 00:20:10.000
also really started hammering the web
application firewall to see how hard you
could push the service or whether it

147
00:20:10.000 --> 00:20:16.000
really did scale to the level that it
needed to to deal with the largest
attacks that are taking place in the

148
00:20:16.000 --> 00:20:23.000
world today I'm not going to go through
all of this with you today nor actually
are we going to do an attack in real

149
00:20:23.000 --> 00:20:29.000
time I did think about that for about
five seconds and then I also thought
that possibly being videotaped while

150
00:20:29.000 --> 00:20:35.000
launching a deliberate denial of service
attack on the world of the world's most
important financial institutions was not

151
00:20:35.000 --> 00:20:45.000
a career advancing strategy so so we
won't be doing that but we do have a
movie and I in the movie i'll show you a

152
00:20:45.000 --> 00:20:53.000
little bit about how an attack evolved
and how it works in practice but these
are the kind of metrics that we were

153
00:20:53.000 --> 00:21:00.000
working with when we actually fall the
test attacks from 200 different
concurrent attack vectors pushing

154
00:21:00.000 --> 00:21:13.000
requests up to the peak over a million
requests a second returning up to 50
plus gigabits a second of data sending

155
00:21:13.000 --> 00:21:18.000
almost five gigabits of data into the
environment so these by any stretch of
the imagination

156
00:21:18.000 --> 00:21:30.000
significant numbers and this is the
instrumentation the that we typically
work with when we're evaluating the

157
00:21:30.000 --> 00:21:36.000
quality of a cyber threat resilient
solution and this is really a mash-up of
several different pieces of

158
00:21:36.000 --> 00:21:44.000
instrumentation at the the bottom left
of the screen you can see your typical
cloud watch metrics I think in this case

159
00:21:44.000 --> 00:21:55.000
we've got across the top row CPU
utilization network utilization the the
right-hand one is elb Q latency which is

160
00:21:55.000 --> 00:22:03.000
important thing will come to in a minute
and then at the bottom instrumentation
for the auto scale pool which tells you

161
00:22:03.000 --> 00:22:12.000
how many instances are in service
responding to the incoming traffic on
the right hand side are some pieces of

162
00:22:12.000 --> 00:22:21.000
instrumentation from some of the red
wolf testing software we have just raw
data volume at the top in the middle we

163
00:22:21.000 --> 00:22:29.000
have number of packets going into the
environment and at the bottom we have
the number of concurrent TCP connections

164
00:22:29.000 --> 00:22:34.000
this is the technical part of the demo
because I have to start this movie while
I'm actually talking so there's my

165
00:22:34.000 --> 00:22:40.000
little mouse cursor going across
hopefully that's working fine and then
at the top as the attack starts we have

166
00:22:40.000 --> 00:22:50.000
the the crown peak instrumentation where
we're harvesting cloud front logs and
harvesting cloud watch metrics in real

167
00:22:50.000 --> 00:22:57.000
time saying them into the crown peak
data management service and then
surfacing them on a graph on a dashboard

168
00:22:57.000 --> 00:23:04.000
you can see that it'll flash up there
that shows how as the attack begins the
auto scale pool is default starting at

169
00:23:04.000 --> 00:23:13.000
six instances and already you can see
CPU stress in the back end of the
environment as we start ramping up the

170
00:23:13.000 --> 00:23:24.000
Hulk attack is beginning to work the
back end quite hard you can see cloud
front requests in the top pile of the

171
00:23:24.000 --> 00:23:32.000
dashboard coming up we've already scaled
the auto scale pool 2 215 instances so
we've already almost tripled

172
00:23:32.000 --> 00:23:40.000
amount of back-end server capacity very
very early on into this first level
attack this attack by the way doesn't is

173
00:23:40.000 --> 00:23:47.000
the baseline architecture which doesn't
include any of the web application
firewall stuff which is why most of the

174
00:23:47.000 --> 00:23:54.000
top dashboard isn't actually showing
anything yet you can see here already in
the elb backlog view at this point in

175
00:23:54.000 --> 00:24:01.000
the test we were already backing up
requests in the elastic load balancer
because there weren't enough instances

176
00:24:01.000 --> 00:24:08.000
available to service the requests we're
getting up to a fairly significant
portion of cloud front requests as you

177
00:24:08.000 --> 00:24:17.000
can see there and there's a lot of
activity in the back end a lot of
scaling activity one of the things that

178
00:24:17.000 --> 00:24:25.000
we notice consistently is although the
back end scales in response to increases
the CPU network traffic there's a

179
00:24:25.000 --> 00:24:32.000
latency so we were seeing of the order
of 60 seconds lag between an auto
scaling event and those instances coming

180
00:24:32.000 --> 00:24:41.000
into service we can see here spikes in
the delivery of network packets trigger
additional instances that are put into

181
00:24:41.000 --> 00:24:53.000
service at the end of the test here
we're getting to something of the order
of 30 instances lots of requests hitting

182
00:24:53.000 --> 00:25:00.000
the cloud front edge distribution and at
the peak of the test I think in this
first phase where we're just exploring

183
00:25:00.000 --> 00:25:10.000
the baseline architecture we were
hitting something of the order of 80,000
packets a second so not bad a couple of

184
00:25:10.000 --> 00:25:18.000
things that we observed during during
that baseline test although the the
application scaled mostly we did see

185
00:25:18.000 --> 00:25:26.000
users experiencing problems time out
requests occasionally lags in the
backhand scaling so we figured that we

186
00:25:26.000 --> 00:25:33.000
could probably improve the end user
experience by adding some web
application firewall capability the

187
00:25:33.000 --> 00:25:41.000
first thing that we did is we use some
of that lambda based crowd cloudfront
log analysis to blacklist IP addresses

188
00:25:41.000 --> 00:25:48.000
that are originating disproportionately
high levels of traffic
we also built a rule set within a WS

189
00:25:48.000 --> 00:26:01.000
graph to detect sequin injection attacks
cross-site scripting attacks and we also
did some work to discard large URLs

190
00:26:01.000 --> 00:26:10.000
large you are eyes because random URL
request forgery forcing the backend to
deliver 404 request is one of the

191
00:26:10.000 --> 00:26:18.000
easiest layer 7 attacks so with the wife
in place as the major of tap begins now
you can immediately see in the top part

192
00:26:18.000 --> 00:26:26.000
you can see how the web application
firewall is beginning to intercept these
attacks where only a brief period in

193
00:26:26.000 --> 00:26:33.000
we're already intercepting something of
the order of nine million illegitimate
requests a minute many of which of those

194
00:26:33.000 --> 00:26:42.000
random URLs that are being generated and
also we found very quickly that the rate
limiting rules that we have built in to

195
00:26:42.000 --> 00:26:55.000
isolate individual IP addresses were a
very very big factor in eliminating
illegal traffic this stage in tests as

196
00:26:55.000 --> 00:27:03.000
you can see lambda has already blocked
around about 175 of the potential
maximum 200 attack vectors that we

197
00:27:03.000 --> 00:27:11.000
hadn't test so neutralizing almost all
of the malicious traffic immediately at
this point in the test we're about

198
00:27:11.000 --> 00:27:17.000
halfway through cloud front is now
dealing with around about 10 million
requests a minute if you think about

199
00:27:17.000 --> 00:27:28.000
that that's a ridiculous volume but
while all of those requests are being
discarded wife is still smart enough to

200
00:27:28.000 --> 00:27:36.000
let the legitimate traffic through to
the back end web application server and
so legitimate server legitimate users

201
00:27:36.000 --> 00:27:47.000
are still seeing perfectly good response
times no backlog in the elb request
queue so no end users getting timeouts

202
00:27:47.000 --> 00:27:54.000
no lack of response in a browser
throughout this entire test the website
was delivering sub 1 second response

203
00:27:54.000 --> 00:28:02.000
time most importantly here
we never ever hit the auto scale
threshold once so so despite this

204
00:28:02.000 --> 00:28:10.000
dramatically larger test in the second
phase with the Waffen we never triggered
the web the auto scaling group at this

205
00:28:10.000 --> 00:28:18.000
point we're handling almost a hundred
times the amount of traffic that we were
able to handle in in the first phase of

206
00:28:18.000 --> 00:28:30.000
the test with no discernable degradation
of service in the back end so and as the
test concludes that I think you can see

207
00:28:30.000 --> 00:28:40.000
some pretty impressive results and also
some some pretty powerful benefits that
accrue just by applying the new web

208
00:28:40.000 --> 00:28:48.000
application firewall technologists in
particular much reduced costs in the
back end because you're not dealing with

209
00:28:48.000 --> 00:28:55.000
all that auto scaling I thought we might
give you a little bit of a glimpse into
how far you can actually really push

210
00:28:55.000 --> 00:29:03.000
these technologies this is the scenario
from all of the testing that we
performed we were blocking hundreds of

211
00:29:03.000 --> 00:29:13.000
IP addresses on the top right hand side
there you can see we were able to filter
out almost 50 million illegal requests a

212
00:29:13.000 --> 00:29:19.000
minute and still let up to 20 million
requests of legitimate traffic come
through in the bottom left you can see

213
00:29:19.000 --> 00:29:28.000
three types of rules that were firing
the green rules of the IP addresses that
were being blacklisted the blue dots are

214
00:29:28.000 --> 00:29:34.000
sequel injection attacks I'm sorry
cross-site scripting attacks and just a
little bit of orange there on the bottom

215
00:29:34.000 --> 00:29:40.000
left which is some sequel injection
attacks that were also blocked but I
think the most powerful metric on this

216
00:29:40.000 --> 00:29:48.000
particular slide is the one in the
bottom right where we were able to to
handle traffic of the order of a hundred

217
00:29:48.000 --> 00:29:58.000
million individual HTTP requests coming
in every minute which is which is
profound so I think in conclusion I

218
00:29:58.000 --> 00:30:09.000
think the opinion that we would Express
and the we would offer to you is that
thinking about deploying CloudFront and

219
00:30:09.000 --> 00:30:16.000
the web application firewall
all offer some some really significant
benefits not only are they really strong

220
00:30:16.000 --> 00:30:23.000
defenses against layer 7 attacks in the
case of the wife and layer three layer
four attacks in the case of cloud front

221
00:30:23.000 --> 00:30:33.000
but they can also benefit you and your
customers in other ways by reducing the
amount of cost that it takes to scale

222
00:30:33.000 --> 00:30:40.000
the back end if you are planning on
experimenting with this kind of
technology in this kind of approach we

223
00:30:40.000 --> 00:30:51.000
have a couple of things that we learned
from our time most of the easily
available attack tool kits on the

224
00:30:51.000 --> 00:30:59.000
internet do a lot of their layer 7
attack generate a lot of their layer 7
attack traffic by randomly generating

225
00:30:59.000 --> 00:31:07.000
super long URLs so limiting those query
strings and sterilizing the headers that
you're processing and passing to to the

226
00:31:07.000 --> 00:31:14.000
backend can really eliminate lots of
common attacks another thing to think
about is really take advantage of what

227
00:31:14.000 --> 00:31:24.000
something like cloud front will offer in
terms of implementing redirection from
HTTP to HTTPS I'm sure most of your web

228
00:31:24.000 --> 00:31:34.000
services today have some kind of
redirection in place doing it at the
edge in the cloud shields the origin not

229
00:31:34.000 --> 00:31:42.000
only from all of the traffic that's
involved in terminating the the SSL
traffic but also shields are back end

230
00:31:42.000 --> 00:31:50.000
from all of that redirection activity
which can be a big deal in the middle of
a DDoS attack and lastly for those of

231
00:31:50.000 --> 00:32:00.000
you who haven't yet embraced sni i would
say embrace it because one of the things
that we found is the most of the

232
00:32:00.000 --> 00:32:07.000
commonly or many of the commonly
available d-does toolkits out there even
today don't implement the TLS handshake

233
00:32:07.000 --> 00:32:17.000
properly that is required in order for
NSN I enable web site to to function
correctly so just moving to s and I can

234
00:32:17.000 --> 00:32:25.000
essentially take you out of the attack
trajectory of many many common attacks
so hopefully that's been

235
00:32:25.000 --> 00:32:32.000
a little bit useful I'd like to hand
over now to Andrew who's going to talk
to you a little bit about ec2 based

236
00:32:32.000 --> 00:32:42.000
defense techniques thank you very much
again thanks for them wow great turnout
I just like dad this is a shameless plug

237
00:32:42.000 --> 00:32:48.000
for a presentation tomorrow we're
actually going to talk about how to
secure your web traffic with Claude

238
00:32:48.000 --> 00:32:54.000
front we're talking about arms in
certificate manager will talk about 53
will talk about the registrar and how

239
00:32:54.000 --> 00:32:59.000
you can use that to secure your workload
so shameless plug there for tomorrow
attain that if you can and this is

240
00:32:59.000 --> 00:33:06.000
something interesting so I think what
you've heard here is there's some great
services in ews to help protect

241
00:33:06.000 --> 00:33:16.000
yourselves and your customers and your
applications from d dose and
unfortunately there's workloads in there

242
00:33:16.000 --> 00:33:24.000
that are a little bit different maybe
they're not web-based maybe they've got
proprietary protocol maybe you can't

243
00:33:24.000 --> 00:33:31.000
take advantage of some of the EWS
services that you've seemed to do so
what talk a little bit about that if

244
00:33:31.000 --> 00:33:36.000
you've had a security conversation with
any of our security SES or with your
account reps that you'll have heard them

245
00:33:36.000 --> 00:33:44.000
talk about the shared security model the
secur security mall really talks about
the things that ews will do to help you

246
00:33:44.000 --> 00:33:49.000
protect and the things that you have to
do yourself and when dig into a lot
about the things that you can do with

247
00:33:49.000 --> 00:33:56.000
your architecture to help yourself first
thing i'd like to know is and this is
really pertinent how many folk in the

248
00:33:56.000 --> 00:34:03.000
audience are gamers or have played first
person shooters no no you know they are
dogs i can put them up okay know how

249
00:34:03.000 --> 00:34:09.000
many of you been seriously fragged by a
13 year old and launched a stress or
tool to take them down and I know I'm

250
00:34:09.000 --> 00:34:18.000
not the only one god yeah so that's a
DDoS attack and unfortunately doesn't
matter that was 13 he's faster than you

251
00:34:18.000 --> 00:34:26.000
my son teaches without regularly but
it's a very important because the gaming
companies really have it hard and

252
00:34:26.000 --> 00:34:33.000
they're almost the port's poster child
for problematic d dos but before we get
into that I am I want to talk a little

253
00:34:33.000 --> 00:34:40.000
bit about how networking works inside
EWS
I'm going to talk about floor logs

254
00:34:40.000 --> 00:34:47.000
security groups and nakal saw if you
have got a strong strong networking
background this is the time to take your

255
00:34:47.000 --> 00:34:55.000
nap because this is meat and potatoes
for you guys so one of the things we
have to look at is how traffic flows in

256
00:34:55.000 --> 00:35:05.000
and out of your application ews is
extract abstracted a lot of the
networking facilities that you've been

257
00:35:05.000 --> 00:35:16.000
used to in your own Prem environment or
in your home and what we get instead is
VPC floor logs security groups and

258
00:35:16.000 --> 00:35:25.000
Knuckles and then a great way for
constraining and controlling your
traffic so the first thing is security

259
00:35:25.000 --> 00:35:33.000
groups for anybody who's been in ews for
less than about three years that this is
kind of the norm but back in the d end

260
00:35:33.000 --> 00:35:39.000
of the thing called ec2 classic which is
fortunately going away and it's been
replaced by the normal paradigm of epcs

261
00:35:39.000 --> 00:35:48.000
and security groups and what security
groups look like are essentially a
firewall if you think about in terms of

262
00:35:48.000 --> 00:35:56.000
your home router your Wi-Fi router at
home where you can poke specific holes
in to let whatever traffic and you are

263
00:35:56.000 --> 00:36:02.000
oh you want your your DNA's traffic your
ntp traffic your web traffic maybe
you've got a camera if you have got a

264
00:36:02.000 --> 00:36:10.000
camera I want to talk to you later
because I want you to make sure you get
a password than that sucker but these

265
00:36:10.000 --> 00:36:19.000
are there's just like fireable you can
choose which I peas which ciders you lay
n and moreover what will you lay out

266
00:36:19.000 --> 00:36:27.000
because not all easy to traffic need to
tell lowing dress traffic if you've got
applications that are back end they

267
00:36:27.000 --> 00:36:34.000
should be in a private subnet which is
non addressable and then turn it and
there's obviously not a target the dudes

268
00:36:34.000 --> 00:36:39.000
but they may need to get out maybe you
need to patch them maybe you need to do
a young update or maybe you need to pull

269
00:36:39.000 --> 00:36:49.000
down a package so they do need egress
capability no as even mentioned scalings
are really cool toy inside eew yes you

270
00:36:49.000 --> 00:36:54.000
can scale up absorb Lords you can
actually use it
for operational things like drooling

271
00:36:54.000 --> 00:37:00.000
over armies as you upgrade your army you
can shoot one and you can bring up
another one so you get some really good

272
00:37:00.000 --> 00:37:10.000
operational techniques but that becomes
a problem in the firewall world because
firewalls r.i.p Beast so if you bring up

273
00:37:10.000 --> 00:37:16.000
a new ec2 instance with a new public IP
or a new private IP then you've got to
reprogram the firewall so one of the

274
00:37:16.000 --> 00:37:24.000
cool things you can do with security
groups is you can tell it that it's not
an AP it needs to think about it's

275
00:37:24.000 --> 00:37:31.000
actually another security group so now
we and then this case what we've got is
an application security group and that's

276
00:37:31.000 --> 00:37:41.000
got a rule that says I even allow any
traffic in from my web server and I'm
going to let any traffic out and then

277
00:37:41.000 --> 00:37:47.000
the web server is basically seen I'm
going to load anything in Port ETS a web
front end it just allows anything can

278
00:37:47.000 --> 00:37:55.000
HTTP traffic so using security groups is
really important the next thing what do
is visualize that traffic know if you're

279
00:37:55.000 --> 00:38:02.000
familiar things like net floor which is
basically a five to pull the 52 people
describes your IP connection your source

280
00:38:02.000 --> 00:38:10.000
IP your vest IP your source port your
day sport and then the protocol be UDP
tcp ICMP what have you you want the

281
00:38:10.000 --> 00:38:20.000
visibility and if you think of it flow
logs as being your visibility into
what's crossing the VPC boundary because

282
00:38:20.000 --> 00:38:28.000
that's really what's pertinent to your
application and you can and you can view
at the entire VPC level or you can look

283
00:38:28.000 --> 00:38:37.000
at it at the EAP or the instance label
to see what traffic's coming in and then
the last thing is nackles now network

284
00:38:37.000 --> 00:38:45.000
ackles work if you're familiar like
rotor ackles they're completely status
they're stateless they simply block

285
00:38:45.000 --> 00:38:54.000
whatever they're told to block and I
love whatever they're told to blow ello
don't get that wrong and now the

286
00:38:54.000 --> 00:39:04.000
difference between the ackles and the
security groups is this security groups
have a default deny rule so you

287
00:39:04.000 --> 00:39:16.000
explicitly have to poke holes out
or n nackles our default deny so
anything in there is going to be denied

288
00:39:16.000 --> 00:39:23.000
by that very last rule so typically what
you see is that there's a rule just
above it there's going to lay everything

289
00:39:23.000 --> 00:39:29.000
in right so that's just something Barry
so if you want to explicitly going block
stuff then you put any additional rules

290
00:39:29.000 --> 00:39:39.000
and here above that rule 100 okay why is
that important right so talk to a gaming
as an industry gaming's really really

291
00:39:39.000 --> 00:39:46.000
tough and there's some really
interesting reason for that first of all
there's no ecosystem the ricoh systems

292
00:39:46.000 --> 00:39:52.000
actually quite complex because they've
got a number of different applications
and services that are very dissimilar

293
00:39:52.000 --> 00:39:58.000
you know get web portals where you go
and create your characters and you know
you sign in and you buy your merchandise

294
00:39:58.000 --> 00:40:05.000
and what have you then they've got the
actual game servers and these are big
beefy servers when it's real time

295
00:40:05.000 --> 00:40:10.000
processing and you've got multiple
players maybe even get multiple games in
a single server and they're doing a

296
00:40:10.000 --> 00:40:15.000
whole different thing then you get
matching servers that are playing join
the dots between the servers and who's

297
00:40:15.000 --> 00:40:23.000
coming on and matching up who's ready to
play and then really servers which are
things like chat and peer-to-peer

298
00:40:23.000 --> 00:40:32.000
connections the thing that makes this
really hard is that these games are
super super latency sensitive if you've

299
00:40:32.000 --> 00:40:40.000
got a web request going out there do you
really care if CNN com resolves in three
milk do you really care if it resolves

300
00:40:40.000 --> 00:40:49.000
frankly bandwidth and but buy me a few
milliseconds here there doesn't really
matter if you're just about to frag

301
00:40:49.000 --> 00:40:56.000
summon and your gun freezes you know
you're into the new game so it's really
important it's basically especially

302
00:40:56.000 --> 00:41:02.000
these competition games with
professional guys were every sat male a
second count so that's really really

303
00:41:02.000 --> 00:41:09.000
important and they also can elude
sensitive as well so there's our number
of reasons that these are not already

304
00:41:09.000 --> 00:41:15.000
met that they're different from other
things though the web portals of it
let's hit the usual suspects you'll

305
00:41:15.000 --> 00:41:20.000
probably border there slide by no but
it's really important to see that if
you've got a web portal

306
00:41:20.000 --> 00:41:27.000
you're in really great shape you've
pretty much get access to all ews
services that are going to help you

307
00:41:27.000 --> 00:41:38.000
protect yourself from needles but the
rest of the services tend to be UDP
Beast that means they can be spoofed

308
00:41:38.000 --> 00:41:50.000
that means our favorite male or in TP
deflection attack or DNS reflection
attack is very effective against this

309
00:41:50.000 --> 00:41:58.000
kind of service latency as i'm in i
mentioned it's a big problem so you
can't put multiple layers of routers and

310
00:41:58.000 --> 00:42:08.000
firewalls or IPs and wife because just
ruins the experience and you can't scale
a game very effectively these

311
00:42:08.000 --> 00:42:14.000
multiplayer games are typically posted
on a single / you can't be charging your
servers because then you're going to get

312
00:42:14.000 --> 00:42:19.000
a different gaming experience you've got
to copy all that real-time data so
typically they're very statically

313
00:42:19.000 --> 00:42:27.000
associated with a particular server
however there are things you can do if
you've been following along with D

314
00:42:27.000 --> 00:42:32.000
Dawson AWS you may be recognized these
things these are the best practices that
we've been talking about these are

315
00:42:32.000 --> 00:42:41.000
things that you can do in ews to secure
your application and Jeff and I author
the white paper it's available an

316
00:42:41.000 --> 00:42:47.000
internal website and they're ws-security
white papers now you can download it
full of Bryce practices really handy

317
00:42:47.000 --> 00:42:55.000
doesn't work so well for gaming servers
so if you get UDP workloads it's not
just the gaming servers it can be voice

318
00:42:55.000 --> 00:43:01.000
over IP it could be video there's a
number of different applications that
have these kind of problems but there

319
00:43:01.000 --> 00:43:09.000
are things we can do reduce the blast
radius talk about a minute this is my
favorite one dido subs have been doing

320
00:43:09.000 --> 00:43:16.000
this for years they play whack-a-mole
they move things around they changed the
IP addresses so you can't find them with

321
00:43:16.000 --> 00:43:24.000
EWS you can change the game on them I'll
talk about that to the first thing
resist my blast radius if you put all

322
00:43:24.000 --> 00:43:30.000
your eggs in one basket the bad
situation is I just soon as here so
there's an old proverb it's very very

323
00:43:30.000 --> 00:43:35.000
true if you've got your ftp server and
your milk
server and your voice application and

324
00:43:35.000 --> 00:43:45.000
your API gate we all in the same server
if any one of those services gets
attacked our fates of relevant so we

325
00:43:45.000 --> 00:43:53.000
don't do that charge your services
service segmentation and this worked
well for gaming you can reduce the

326
00:43:53.000 --> 00:44:01.000
amount of a fate that gamers are funny
law they kind of move or not there are
actually two Boylan if a game blows up

327
00:44:01.000 --> 00:44:07.000
they just jump on the next one if you
can reduce that blaster ii this so it's
a game that's being affected you get 200

328
00:44:07.000 --> 00:44:20.000
other games that quite happy and you can
do this for our applications as well
restrict access if you know who your

329
00:44:20.000 --> 00:44:29.000
clients are you can set your security
groups so that they are little with
people that can connect these big

330
00:44:29.000 --> 00:44:37.000
multiplayer games know exactly who's
connecting they know the source IP of
every single player because that's what

331
00:44:37.000 --> 00:44:44.000
the matching server does there's many
applications out there that have similar
characteristics maybe it's appearing

332
00:44:44.000 --> 00:44:53.000
application with a sister company you
know the IP range that has so you can
take advantage of that on host you can

333
00:44:53.000 --> 00:45:00.000
do on host filtering iptables net
filters or fail it's great you can do
all kinds of stuff we use an AWS a lot

334
00:45:00.000 --> 00:45:07.000
you can do rate based limiting you can
drop stuff you can fragment you can pick
up a lot of garbage in there that makes

335
00:45:07.000 --> 00:45:19.000
it really really easy to drop bad
traffic you can move the target one of
the problems with on-prem is if you're

336
00:45:19.000 --> 00:45:26.000
really lucky you've got a b-level
address as I / it for the for the new
folks you may have a C or a handful of

337
00:45:26.000 --> 00:45:34.000
C's / sixteens the problem is they're
contiguous the DDoS guys are not stupid
they know that if you've got 10 11 20

338
00:45:34.000 --> 00:45:44.000
you probably get 10 11 21 so they can
basically do a horse scan across you
write P space learn it and use that to

339
00:45:44.000 --> 00:45:53.000
your advantage
ews has lots of eye peas and I mean a
lot not as much as I will have when we

340
00:45:53.000 --> 00:46:02.000
get ipv6 everywhere but we have a lot of
IP space that means you can get lots of
different IP addresses not only that the

341
00:46:02.000 --> 00:46:10.000
IP address is that you get any wsr
non-contiguous so the deed or sirs can
assume that your IP space is contiguous

342
00:46:10.000 --> 00:46:21.000
and just hop from one to the next so if
you get an attack you can simply pick up
that eip move off into a safe zone and

343
00:46:21.000 --> 00:46:29.000
get yourself a new one the good thing
that this is all so you don't have to
get rid of that instance you can do

344
00:46:29.000 --> 00:46:37.000
forensics on you can look at it you can
use it like a honeypot to figure out
what those attacks are doing so just

345
00:46:37.000 --> 00:46:47.000
talked about some of the attributes some
of the services even told you how it
works in practice I'd know like to

346
00:46:47.000 --> 00:46:56.000
invite up the phones review speak to
speak to you and tell you how this works
in practice I like they can for David

347
00:46:56.000 --> 00:47:10.000
thank you
hi so I'm the founder of type frag calm
and we provide teamspeak hosting so how

348
00:47:10.000 --> 00:47:17.000
many people here are familiar with
teamspeak have used it before great ok
so when teamspeak goes down do not blame

349
00:47:17.000 --> 00:47:24.000
us blame the DDoS attackers because
that's the cause of almost ninety nine
percent of down time on teamspeak so

350
00:47:24.000 --> 00:47:30.000
teamspeak for those who aren't familiar
is a client server based voice
communication program it's very popular

351
00:47:30.000 --> 00:47:38.000
amongst online gamers and those gamers
in order to gain an advantage in the
games will sometimes launch DDoS attacks

352
00:47:38.000 --> 00:47:44.000
so if you're playing a competitive game
and you're playing with your team you
know the opposing team is using voice

353
00:47:44.000 --> 00:47:49.000
communication and you want to knock out
their comms it's a common military
strategy right you launch a DDoS attack

354
00:47:49.000 --> 00:47:59.000
against that server so this is something
that's cost us a lot of time of the
years a lot of sleepless nights trying

355
00:47:59.000 --> 00:48:05.000
to trying to defend against ddos attacks
and one of the things I learned is that
there's really no silver bullet for

356
00:48:05.000 --> 00:48:12.000
dzasta tax so originally we used to
co-locate our network on various
providers you know equinox internap

357
00:48:12.000 --> 00:48:19.000
these sorts of companies and the common
detox defense tactic was to over
provision our network edge so if you can

358
00:48:19.000 --> 00:48:24.000
imagine at the network edge we have
multiple for two gigabit connections
then down to our switches we have 10

359
00:48:24.000 --> 00:48:30.000
gigabit connections then down to our
individual machines one gigabit
connections so when DDoS attacks started

360
00:48:30.000 --> 00:48:37.000
to get up past 40 gigabytes we needed to
block 75% of the traffic at the network
edge in order not to congest the cross

361
00:48:37.000 --> 00:48:43.000
connects and then block an additional 90
percent traffic at the cross connect or
rather at the access layer in order not

362
00:48:43.000 --> 00:48:51.000
to overwhelm the individual system so
this worked for about three years but
eventually those attacks got so large

363
00:48:51.000 --> 00:49:01.000
that it became cost prohibitive to
continue to block at the network edge so
we did a couple things when moving to

364
00:49:01.000 --> 00:49:09.000
AWS first leveraging AWS is global
infrastructure is extremely important we
once you move to AWS you're going to get

365
00:49:09.000 --> 00:49:14.000
the built-in protection that Jeff's team
provides and that's blocks about ninety
percent of sir

366
00:49:14.000 --> 00:49:20.000
impacting DDoS attacks but from there
you could do a couple of other things
first you can minimize the attack

367
00:49:20.000 --> 00:49:30.000
surface so using nackles and security
groups limiting the amount of ports that
can be attacked is very helpful and then

368
00:49:30.000 --> 00:49:37.000
reducing the blast radius and this one
is not as obvious so when you minimize
the attack surface that's kind of the

369
00:49:37.000 --> 00:49:42.000
same as in a network in your traditional
network environment right you're
applying nackles at a pork basis so

370
00:49:42.000 --> 00:49:48.000
that's pretty common but reducing a
blast radius that's something that's
kind of unique to AWS and it will

371
00:49:48.000 --> 00:49:53.000
discuss that in a bit here and then
forth which is which is really cool is
to be able to automatically mitigate

372
00:49:53.000 --> 00:50:01.000
those attacks and we'll get to number 52
which is analyzed and learn which is
really really important one so one of

373
00:50:01.000 --> 00:50:10.000
the prerequisites for minimizing the
attack surface is using one network
access control list / v pc subnet so in

374
00:50:10.000 --> 00:50:17.000
AWS normally you have one knakal that
can be applied to multiple subnets and
then you can obviously launched multiple

375
00:50:17.000 --> 00:50:25.000
instances into the subnets so this is
kind of an uncommon setup you want to
actually use one Knakal / v pc one one

376
00:50:25.000 --> 00:50:32.000
instance / v pc and that allows you to
control these on a per instance basis so
as Andrew alluded to you can dynamically

377
00:50:32.000 --> 00:50:38.000
whitelist and blacklist users and you're
going to want to be able to do that on a
per instance basis so that's that's an

378
00:50:38.000 --> 00:50:44.000
important building block in our setup on
AWS another important thing from the
slide is the use of elastic IP addresses

379
00:50:44.000 --> 00:50:53.000
so these can be changed on the fly which
is extremely important when mitigating
the attacks we'll get to that soon so

380
00:50:53.000 --> 00:51:03.000
here's a quick snapshot of our nackles
here we reduced the attack surface from
what was normally 65,000 plus ports down

381
00:51:03.000 --> 00:51:10.000
to about 100 you might notice also if
you look really closely the ephemeral
port range for the instance that opens

382
00:51:10.000 --> 00:51:15.000
up few other thousand ports you can
actually limit that as well if you
adjust it on your instance and adjust it

383
00:51:15.000 --> 00:51:21.000
in the nackles and then here on the
right you'll see that we are using an
elastic IP address the elastic IP

384
00:51:21.000 --> 00:51:28.000
address Nats to the internal IP address
and if you remove that elastic IP
address you can still route

385
00:51:28.000 --> 00:51:34.000
and connect via the private IP in the
subnet which is really cool or if you
swap it out you can stop the attack

386
00:51:34.000 --> 00:51:41.000
right in his tracks when we're going to
demonstrate that later so this is the
one that that was not as evident moving

387
00:51:41.000 --> 00:51:49.000
from a co-located environment on to the
cloud so when we first moved to AWS we
looked at our instances and we saw that

388
00:51:49.000 --> 00:51:57.000
they had dual xeon 32 gigabyte RAM so we
looked at an instance class at AWS that
was comparable and we quickly learned

389
00:51:57.000 --> 00:52:04.000
that that's not exactly the best
strategy if you can use smaller
instances use more of them spread your

390
00:52:04.000 --> 00:52:10.000
customers across them you'll actually
reduce the blast radius so any
individual attack will affect less users

391
00:52:10.000 --> 00:52:23.000
like that so attack mitigation this is
pretty simple you can get well you can
get pretty complex with it depending on

392
00:52:23.000 --> 00:52:30.000
the type of monitoring you set up and
how you actually mitigate the attack but
in this example we're just using cloud

393
00:52:30.000 --> 00:52:36.000
watch alarms that trigger lambda
functions lambdas serverless compute
platform offered by AWS and that lambda

394
00:52:36.000 --> 00:52:43.000
function will actually switch over the
IP address on the instance another
important component is route 53 you

395
00:52:43.000 --> 00:52:49.000
could use your own DNS I would not
suggest doing that route 53 s great cost
very little and it's programmatically

396
00:52:49.000 --> 00:52:54.000
accessible but of course you could use
your own DNS infrastructure if it was
programmatically accessible to change

397
00:52:54.000 --> 00:53:04.000
the record for that DNS so first thing
you want to detect the attack as soon as
possible faster you detect it the sooner

398
00:53:04.000 --> 00:53:10.000
you can mitigate it with cloud watch you
can do that usually in about 60 to 90
seconds if you roll your own monitoring

399
00:53:10.000 --> 00:53:16.000
you can get that down below 10 seconds
once the attack is detected you're going
to want to trigger the lambda function

400
00:53:16.000 --> 00:53:27.000
to change the IP addresses on the
instance and also update route 53 once
you do that you're effectively

401
00:53:27.000 --> 00:53:35.000
mitigating the attack the elastic IP
continues to get hit as Andrew suggested
you could play cat and mouse you can put

402
00:53:35.000 --> 00:53:41.000
it on another instance and start
collecting data about the attackers or
you can just throw it away and

403
00:53:41.000 --> 00:53:51.000
use the new IP once that Sun the attack
is mitigated so I put together a short
demonstration unlike BNY Mellon were not

404
00:53:51.000 --> 00:54:02.000
a systemically important institution so
I did record a demo of me attacking one
of our test instances probably not the

405
00:54:02.000 --> 00:54:10.000
wisest thing to do but i'm going to
share that with you right now connected
hey Nathan thanks for joining me on

406
00:54:10.000 --> 00:54:22.000
teamspeak not a problem so I need to
trigger an elastic IP address change by
simulating a denial of service attack ok

407
00:54:22.000 --> 00:54:27.000
so i want to show what it looks like
from the users perspective so if you
could talk why run the simulation would

408
00:54:27.000 --> 00:54:33.000
be very helpful sure what do you want me
to talk about I guess you could tell me
a story about your adventures in the new

409
00:54:33.000 --> 00:54:45.000
battlefield game ok alright so I'm going
to go ahead and start to sim now alright
well i'm definitely enjoying the game

410
00:54:45.000 --> 00:54:51.000
they've got this new campaign mode
that's a lot of fun the other day I
ployed down a medic with the rest of my

411
00:54:51.000 --> 00:54:58.000
squad and we were attacking the trenches
we managed to get all the way up to the
trench and I jumped in it after pretty

412
00:54:58.000 --> 00:55:07.000
much the rest of the squad got killed
and I'm running down the trench and this
guy pops up in front of me hey Nathan e

413
00:55:07.000 --> 00:55:14.000
there cut out so that's the attack
obviously disrupting the voice come all
right looks like the elastic IP address

414
00:55:14.000 --> 00:55:39.000
change was triggered
any second now should be reconnected
connection lost that's it it's just as I

415
00:55:39.000 --> 00:55:49.000
got revived I swear I was about 20 kills
at that point so you got cut out there
for a good 20 seconds oh okay not too

416
00:55:49.000 --> 00:56:01.000
bad though I think it took maybe just
about a minute not bad what you should
think of the 20 kills though so

417
00:56:01.000 --> 00:56:09.000
following these three simple strategies
we were able to reduce the impact of
attacks on our network by ninety-nine

418
00:56:09.000 --> 00:56:17.000
point nine percent and so first having
moved to AWS we solved the number of
service indicting attacks go down from

419
00:56:17.000 --> 00:56:25.000
roughly just over 50 to blow 5 each
month which was a significant drop for
us and that's that service impacting

420
00:56:25.000 --> 00:56:31.000
attack so we get hit probably a hundred
plus times a month and seeing only five
of those actually come through and hit

421
00:56:31.000 --> 00:56:41.000
our instances was was a huge improvement
and after making that move I finally got
some some sleep with this problem but

422
00:56:41.000 --> 00:56:48.000
second reducing the surface area and
spreading out the the number of
instances to reduce the blast radius we

423
00:56:48.000 --> 00:56:54.000
are further able to reduce the impact of
any single attack from roughly 2,000
concurrent users connected down to below

424
00:56:54.000 --> 00:57:00.000
200 so that was another order of
magnitude improvement and then when you
add in the automatic DDoS mitigation

425
00:57:00.000 --> 00:57:09.000
you're going from usually a 15 minute
response time and a bunch of pagers
blowing up down to 90 seconds so taking

426
00:57:09.000 --> 00:57:16.000
that all together we measure our impact
in terms of user minutes per month we
went from about 1.5 million user minutes

427
00:57:16.000 --> 00:57:22.000
per month and that was out of about five
billion user minutes from our users down
to below 1500 which was a great

428
00:57:22.000 --> 00:57:31.000
improvement so the last thing I wanted
to talk about was attackin alisis and
this is a really really important piece

429
00:57:31.000 --> 00:57:38.000
of DDoS mitigation strategy and it's not
talked about enough but that's
identifying the attackers and then

430
00:57:38.000 --> 00:57:43.000
holding them accountable and that could
be just submitting abuse reports to the
offending networks or could actually be

431
00:57:43.000 --> 00:57:49.000
tracking down the attackers and we've
had some success actually doing that in
prosecuting attackers against

432
00:57:49.000 --> 00:57:55.000
network believe it or not and so we
built this cool little app it's a single
page app if you're not familiar that's

433
00:57:55.000 --> 00:58:01.000
essentially you have static content that
you can host in cloud front and s3 and
that serves up the the primary user

434
00:58:01.000 --> 00:58:10.000
interface for your application and the
backend using lambda and API gateway we
built a restful api that actually

435
00:58:10.000 --> 00:58:17.000
analyzes the bpc flows now we could have
done this with Kinesis and redshift and
these other amazon services so that we

436
00:58:17.000 --> 00:58:23.000
would have historical data but we wanted
to do this on demand and so we didn't
want to spend thousands of dollars

437
00:58:23.000 --> 00:58:29.000
keeping these VPC flow logs and running
the queries against them continuously we
just wanted to look at a single attack

438
00:58:29.000 --> 00:58:37.000
after it happened identify the targets
and then prosecute so we built this
really cool tool and it costs us about

439
00:58:37.000 --> 00:58:45.000
five dollars a month to run and it gives
us reports like this in this particular
case it was a non-service impacting

440
00:58:45.000 --> 00:58:52.000
attack that that targeted port 80 one of
the ones that we block but running the
analysis in lambda we were able to

441
00:58:52.000 --> 00:59:00.000
identify over a thousand source IP
addresses that contribute to this attack
and so we tracked them down submitted

442
00:59:00.000 --> 00:59:05.000
abuse reports and this again this is
really important particularly as i OT
and these other things come online is

443
00:59:05.000 --> 00:59:13.000
knowing who the attackers are if you if
you fight the good fight then you can
reduce the number of bots in the botnet

444
00:59:13.000 --> 00:59:22.000
which helps reduce the impact of d doses
for everybody so that's all then I ended
off to Jeff here I don't think we're

445
00:59:22.000 --> 00:59:41.000
doing any questions but he's going to
show how to submit support thanks
we've learned about how you mitigate or

446
00:59:41.000 --> 00:59:48.000
how we mitigate DDoS attacks in the
cloud and how you can use our services
to take advantage of those mitigations

447
00:59:48.000 --> 00:59:56.000
so that when we work together you can
benefit from the scale and resiliency of
AWS to optimize for both performance and

448
00:59:56.000 --> 00:60:06.000
availability of your application in the
face of DDoS attacks but what happens
when the automated systems don't work as

449
00:60:06.000 --> 00:60:13.000
intended or the architecture that you've
built doesn't do quite what you thought
it was going to do and that attacker was

450
00:60:13.000 --> 00:60:21.000
able to find a way around and impact the
availability of your application what's
next and so on my team on the de NOS

451
00:60:21.000 --> 00:60:28.000
response team we spend a lot of time
thinking about how can we make life
better for a 2 b.s customers in that

452
00:60:28.000 --> 00:60:36.000
very small percentage of cases where
things just don't go as planned what can
we do for you to help you out and so we

453
00:60:36.000 --> 00:60:41.000
thought about this in the feedback we
were getting from a lot of customers was
you know these systems work great

454
00:60:41.000 --> 00:60:46.000
normally but what happens when they
don't like I don't really know what my
next step is like what is my recourse

455
00:60:46.000 --> 00:60:55.000
and so we partnered up with AWS support
and we built a new capability into the
AWS support center and it's really quite

456
00:60:55.000 --> 00:61:01.000
simple you just go to the ADF support
center assuming that you're subscribed
to at least business or enterprise

457
00:61:01.000 --> 00:61:09.000
support you click create a case and then
you have a new service type and the new
service type is just this generic

458
00:61:09.000 --> 00:61:16.000
description of distributed
denial-of-service behind the scenes
that's causing your case to not be

459
00:61:16.000 --> 00:61:23.000
routed to a specific service
representative but rather to be routed
to somebody in AWS support who

460
00:61:23.000 --> 00:61:31.000
specializes in security issues like de
las attacks and then you just provide a
brief description of what's going on

461
00:61:31.000 --> 00:61:38.000
what do you know about the attack what
what impact are you seeing and then you
just click to chat or click to talk to

462
00:61:38.000 --> 00:61:42.000
us on the phone and depending on the
level of support that you've purchased
you can get in touch with us pretty

463
00:61:42.000 --> 00:61:49.000
quickly
so that's it in a nutshell to learn more
about the different techniques that you

464
00:61:49.000 --> 00:61:54.000
can use to architect your applications
and some of the things that we discussed
in terms of the mitigations that we

465
00:61:54.000 --> 00:62:04.000
provide if you go to AWS amazon com /
security you can download the AWS best
practices for d das resiliency and you

466
00:62:04.000 --> 00:62:09.000
may be familiar with this white paper
from years prior this is actually a new
version that's only a few months old so

467
00:62:09.000 --> 00:62:15.000
it has a lot of new tips and tricks and
a lot of new information that you can
use I want to thank everyone for coming

468
00:62:15.000 --> 00:62:22.000
out and I want to place a lot of
emphasis on this slide because this is
actually really important to us it's not

469
00:62:22.000 --> 00:62:30.000
just fun data it's not just nice to have
data every year we take a deep look at
this data and it helps us decide are we

470
00:62:30.000 --> 00:62:35.000
going to come back next year and give
you more information about DDoS attacks
or how are we going to create the
security track so your feedback on this
evaluation is really important to us
thank you for coming