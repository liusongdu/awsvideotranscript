WEBVTT FILE

1
00:00:00.000 --> 00:00:11.000
good morning folks welcome to AWS
CloudFormation best practices as folks
are coming in we will go ahead and get

2
00:00:11.000 --> 00:00:20.000
started I'm Abhishek loll I'm the
product manager for CloudFormation and
excited to be here today with Chris

3
00:00:20.000 --> 00:00:28.000
Whitaker so I'm Chris Whitaker on the
dev manager for CloudFormation and
together we want to take the next hour

4
00:00:28.000 --> 00:00:41.000
and cover several best practices related
to CloudFormation if folks are not
familiar with CloudFormation it is your

5
00:00:41.000 --> 00:00:51.000
infrastructure as code service just as
you write code, version it, update it you
can do the same with all your AWS

6
00:00:51.000 --> 00:00:59.000
resources all your infrastructure
resources CloudFormation not only lets
you declare infrastructure as code it

7
00:00:59.000 --> 00:01:09.000
actually takes care of all the ordering
and provisioning of your resources based
on the dependencies between them letting

8
00:01:09.000 --> 00:01:16.000
you not do all the hard work of figuring
out which resource needs to be created
before and after or dealing with

9
00:01:16.000 --> 00:01:26.000
individually APIs giving you a single
consistent interface to provision
resources it also integrates with the

10
00:01:26.000 --> 00:01:36.000
development processes and CI/CD tools
are the management tools to provide you
a great platform to build your

11
00:01:36.000 --> 00:01:48.000
applications and infrastructure
end-to-end for the session today I am
going to kick off by introducing the

12
00:01:48.000 --> 00:01:56.000
CloudFormation designer this was a new
feature we announced last week so we
will spend about 20 minutes walking

13
00:01:56.000 --> 00:02:05.000
through the designer and seeing what it
is capable off after that we will go
into some areas talking about how

14
00:02:05.000 --> 00:02:13.000
CloudFormation can help you as an
organization this could be about budgets
this can be about audit

15
00:02:13.000 --> 00:02:20.000
there are a lot of organizational
features which CloudFormation can
really help with Chris will be

16
00:02:20.000 --> 00:02:32.000
presenting that section followed by some
advanced concepts as well as best
practices these will include security

17
00:02:32.000 --> 00:02:42.000
these will include being able to write
templates which are reusable as well as
making you aware of some of the language

18
00:02:42.000 --> 00:02:50.000
features that we have in CloudFormation
so just wanted to set the agenda these
are the expectations and we hope to

19
00:02:50.000 --> 00:03:00.000
finish about 10 minutes early to keep
some time for question and answers but
as sessions go if we do not get to that

20
00:03:00.000 --> 00:03:09.000
Chris and I both will be available here
after the session to take your questions
and i believe the room is empty so we'll

21
00:03:09.000 --> 00:03:16.000
have a lot of time for that and if that
doesn't happen we will be at the devops
section of our booth so any questions

22
00:03:16.000 --> 00:03:31.000
you have you'll be able to talk to us
AWS CloudFormation designer today when
you create resources in ews there is an

23
00:03:31.000 --> 00:03:41.000
ever-increasing set of different
abstractions and resources that AWS
services provide you being able to

24
00:03:41.000 --> 00:03:51.000
visualize these resources which are part
of a template was a key customer ask
hence we worked on CloudFormation

25
00:03:51.000 --> 00:04:01.000
designer which lets you see all your
resources which are part of a template
in a visual designer form once you are

26
00:04:01.000 --> 00:04:09.000
able to visualize them the next step
folks asked was how do you make quick
modifications be able to hone in on a

27
00:04:09.000 --> 00:04:17.000
specific resource that you want to
quickly modify and then be able to
upload those changes that is a scenario

28
00:04:17.000 --> 00:04:26.000
support supported by the CloudFormation
designer the third aspect and which I am
going to walk in detail today in my

29
00:04:26.000 --> 00:04:34.000
demo in the next 15 minutes is how do
you actually start from a sample or
start from just a basic architecture and

30
00:04:34.000 --> 00:04:45.000
evolve it using the designer so we will
see all those three scenarios the first
one which I just want to show you is the

31
00:04:45.000 --> 00:04:57.000
ability to visualize a template let me
log in to the AWS management console and
here i am on my CloudFormation home

32
00:04:57.000 --> 00:05:07.000
page which is where all my stacks are
listed you can see for any particular
stack that i select in this case a demo

33
00:05:07.000 --> 00:05:20.000
website there is a description which the
template may have contained and there is
a resources tab so this resources tab is

34
00:05:20.000 --> 00:05:32.000
what displays all the individual
resources that the template has defined
in it as you can see it's a fairly flat

35
00:05:32.000 --> 00:05:39.000
view it doesn't give you any knowledge
about relationships it doesn't give you
any knowledge about dependencies that

36
00:05:39.000 --> 00:05:50.000
may exist between these resources with
CloudFormation designer I can just take
this selected template and view it in

37
00:05:50.000 --> 00:06:04.000
the designer so right here you see in
this example I have a VPC based website
where it gives me a nice indication of

38
00:06:04.000 --> 00:06:20.000
all the relationships so at the top I
have an EC2 VPC, network ACLs, the
specific ACL entries as well as

39
00:06:20.000 --> 00:06:29.000
relationships so for example the
Internet gateway the IP address and how
each of these resources are connected to

40
00:06:29.000 --> 00:06:40.000
each other I can also see my EC2 VPC and
the subnet that it is part of so in this
example we see how very

41
00:06:40.000 --> 00:06:47.000
quickly for any CloudFormation stack
which you have created from a template
you get to visualize and view all of

42
00:06:47.000 --> 00:07:00.000
those resources now once you've seen
something how does the designer help you
in making an update let's take a look at

43
00:07:00.000 --> 00:07:13.000
that the scenario I'm going to walk
through here is I have a particular
website running and the EC2 instance is

44
00:07:13.000 --> 00:07:23.000
part of a security group what I want to
do is figure out if SSH ports are
enabled and if not then enable them so

45
00:07:23.000 --> 00:07:33.000
very small kind of a modification so I
opened my demo stack which is basically
a single EC2 instance and I do view in

46
00:07:33.000 --> 00:07:42.000
designer just I had as I had navigated
in the earlier part of the demo so very
simple stack it has two resources in the

47
00:07:42.000 --> 00:07:52.000
template I can hover over each of the
resource see what type it is I can
actually select a particular resource

48
00:07:52.000 --> 00:08:00.000
and the moment you select a resource you
will see the components tab at the
bottom gets populated with all the

49
00:08:00.000 --> 00:08:10.000
declaration that template has for it so
in this case I see all the references
and the description which I have added

50
00:08:10.000 --> 00:08:19.000
for my EC2 instance let me select the
security group because that's where I
need to make a change in the security

51
00:08:19.000 --> 00:08:30.000
group I have the ingress of port 80
available but I can clearly see that
port 22 is not there so how do i add

52
00:08:30.000 --> 00:08:39.000
that let me click into the components
tab the components tab lets you focus on
a single resource and make modifications

53
00:08:39.000 --> 00:08:50.000
to it I press control space and I see
autocomplete for all the properties
which is there so very quickly I can

54
00:08:50.000 --> 00:09:02.000
specify which protocol
I can specify the from port the to port
and all the specific properties that I

55
00:09:02.000 --> 00:09:10.000
want to define the advantage here was if
I am not familiar I didn't have to go
refer to documentation to see what the

56
00:09:10.000 --> 00:09:21.000
exact property name was all of that is
available to you using code come or to
complete I make those changes and in

57
00:09:21.000 --> 00:09:33.000
this case I am going to add the IP range
to this just to call out for this demo I
used 0 all 0 this is clearly not best

58
00:09:33.000 --> 00:09:44.000
practice so you know do not take a
picture of that but once I have made
this update I can now go and click

59
00:09:44.000 --> 00:09:54.000
update stack and right from here with
all the changes I just mean I get
dropped into the update stack wizard I

60
00:09:54.000 --> 00:010:05.000
can make any parameter changes or any
updates which in this case I don't need
to I click through the wizard and I can

61
00:10:05.000 --> 00:10:16.000
update the stack so what you saw was how
powerful the designer can be for you to
hone in on a particular resource be able

62
00:10:16.000 --> 00:10:25.000
to make quick modifications and then
with those modifications update your
existing stack in there so i finished

63
00:10:25.000 --> 00:10:35.000
the update procedure you can see the
update is in progress user-initiated is
the state let me go refresh the the

64
00:10:35.000 --> 00:10:43.000
portal and you can see as the update
propagates through the CloudFormation a
designer will show you all the events

65
00:10:43.000 --> 00:10:54.000
and eventually show the update has
completed in this case so that was the
part about making a quick modification

66
00:10:54.000 --> 00:11:03.000
can you actually do authoring can the
designer help you with authoring a
template and doing some rich work in

67
00:11:03.000 --> 00:11:13.000
there let's see how that comes
out in this particular scenario I want
to start with the same website i had

68
00:11:13.000 --> 00:11:19.000
it's a single instance with a security
group so i'm going to start with the
very same website which i had a simple

69
00:11:19.000 --> 00:11:28.000
web application but i am coming with the
goal my goal is to make this a highly
available website what do i need for

70
00:11:28.000 --> 00:11:36.000
that I need to make several changes I
need auto scaling for compute I need a
load balancer so I need to make some

71
00:11:36.000 --> 00:11:45.000
very rich edits in order to take this
website and make it highly available how
do I do that let's see it step by step

72
00:11:45.000 --> 00:11:54.000
the first thing you see is the resource
types listed on the left these are all
resources supported by CloudFormation

73
00:11:54.000 --> 00:12:02.000
we will continue to keep hundred percent
parity with CloudFormation support and
the resources that you have available in

74
00:12:02.000 --> 00:12:12.000
the diesel designer I start by dragging
in the auto scaling group so simple
drag-and-drop gesture and I can give

75
00:12:12.000 --> 00:12:24.000
this a logical name clicking on the
checkbox now I have an auto scaling
group available to me just as I did

76
00:12:24.000 --> 00:12:33.000
earlier let me start typing in the
properties i am familiar with auto
scaling groups so in that sense i know

77
00:12:33.000 --> 00:12:43.000
all the key properties that i need to
provide for an auto scaling group
availability zones is one of them the

78
00:12:43.000 --> 00:12:54.000
next one which i am going to add to the
auto scaling group is the min size the
max size the desired capacity so if you

79
00:12:54.000 --> 00:13:02.000
are familiar with the resource very
quickly you can use code complete and
add those properties while you are

80
00:13:02.000 --> 00:13:12.000
making all these edits note how the
designer pane the visual pane stops
refreshing what is going on here is the

81
00:13:12.000 --> 00:13:20.000
component view lets you modify a
particular component
and until you have a valid component

82
00:13:20.000 --> 00:13:28.000
that is you made only valid changes the
designer will not sync or commit those
changes so clicking on the top right

83
00:13:28.000 --> 00:13:37.000
refresh is what committed all the
changes I needed for the auto scaling
group now notice the dots you see on

84
00:13:37.000 --> 00:13:47.000
each of the nodes those are clues about
what auto scaling group is related to so
one of the nodes I see in there is a

85
00:13:47.000 --> 00:13:58.000
load balancer so I scroll down find a
load balancer and put that on the screen
this unfortunately is not a resource I

86
00:13:58.000 --> 00:14:05.000
am familiar with I do not know how load
balances are configured I know what it
is I just don't know how to configure it

87
00:14:05.000 --> 00:14:16.000
so i right click and navigate to help
documentation right from the resource so
right here you get dropped into the

88
00:14:16.000 --> 00:14:24.000
CloudFormation description of a load
balancer resource now I am a very fast
learner so I'm just going to scroll at

89
00:14:24.000 --> 00:14:34.000
the speed of light but most of us will
take some time read through all of this
and the good part is it tells me what

90
00:14:34.000 --> 00:14:41.000
are all the required fields and the non
required fields so really helps me
narrow down on what are the key

91
00:14:41.000 --> 00:14:50.000
properties I need to focus on so with my
newfound knowledge i'm back and now i
can start typing in all the properties

92
00:14:50.000 --> 00:14:59.000
that i want to specify so in this way
we've helped you in the experience of
authoring where you can find resources

93
00:14:59.000 --> 00:15:08.000
you can find what is related to them
what are the most common relationships
that you create and based on that go

94
00:15:08.000 --> 00:15:22.000
discover the documentation and help for
those resources in this case I create a
single listener instance port which is

95
00:15:22.000 --> 00:15:32.000
port 80 and given the documentation told
me that I need to specify
a protocol I will make sure that I add

96
00:15:32.000 --> 00:15:43.000
the protocol as one of the items here so
protocols HTTP and with that I have made
all the basic requirements which I

97
00:15:43.000 --> 00:15:52.000
needed go on top right click refresh and
I am ready to go now I am going to drag
and drop this relationship between the

98
00:15:52.000 --> 00:16:04.000
auto scaling group to the load balancer
note the highlighting when you drag and
drop from a particular node we highlight

99
00:16:04.000 --> 00:16:13.000
those specific types of resources which
you can create relationships to the one
remaining item which I have to complete

100
00:16:13.000 --> 00:16:21.000
this operation is adding a launch
configuration now if folks are familiar
with launch configurations they are

101
00:16:21.000 --> 00:16:29.000
essentially used by an auto scaling
group to stamp out new instances so they
have a lot of properties which are very

102
00:16:29.000 --> 00:16:39.000
similar to an instance property now one
I I would want to copy paste all the
parameter values that I have from my

103
00:16:39.000 --> 00:16:49.000
instance to my launch configuration
since this is a heavy edit operation
copy paste and placing I'm going to

104
00:16:49.000 --> 00:16:58.000
switch to the template view and maximize
that pain this is the editor pane in
which you get a full view of the

105
00:16:58.000 --> 00:17:06.000
template in the designer we have still
not visualized some of the things for
example the description or your

106
00:17:06.000 --> 00:17:15.000
parameters or outputs these are things
which are not visualized in the designer
so you always will have the template

107
00:17:15.000 --> 00:17:26.000
view to come in and be able to make your
edits in this case I copy all the text
which was part of the instance and I

108
00:17:26.000 --> 00:17:36.000
scroll down to find my launch
configuration and in here in the
properties as is i can paste all of that

109
00:17:36.000 --> 00:17:47.000
changes so with that I am done with my
edit let me bring back my designer
view and click refresh to be able to see

110
00:17:47.000 --> 00:17:54.000
all the changes see how that
relationship showed up the relationship
from the launch configuration to the

111
00:17:54.000 --> 00:18:02.000
security group is now available the web
server instance is no longer needed I
can right click and we have a delete

112
00:18:02.000 --> 00:18:18.000
context menu right there so I will use
that and get rid of the instance in
there the one last step remaining for my

113
00:18:18.000 --> 00:18:26.000
change is to create that relationship
from the auto scaling group to the
launch configuration I navigate to the

114
00:18:26.000 --> 00:18:34.000
right node notice how launch
configuration has lit up so it gives me
a clue that that those are all the

115
00:18:34.000 --> 00:18:43.000
resources and I create that relationship
in there so all good I have made a bunch
of changes i am feeling really good

116
00:18:43.000 --> 00:18:52.000
about this what's the next step the next
step is to validate so I'm going to
click validate template in here this is

117
00:18:52.000 --> 00:18:59.000
the first time we are going to send this
template back to CloudFormation as an
API call and validate for errors oh I

118
00:18:59.000 --> 00:19:08.000
see an error right here it says I am
using a function get at for a resource
called web server instance that's right

119
00:19:08.000 --> 00:19:18.000
i had a web server instance but i don't
have it anymore i have replaced it now
with a load balancer endpoint which i

120
00:19:18.000 --> 00:19:26.000
need so now i'm going to replace the
logical name from web server instance to
the load balancer because i want the

121
00:19:26.000 --> 00:19:35.000
public dns name to come from the load
balancer so validate template helped me
there I made my change hit refresh and

122
00:19:35.000 --> 00:19:44.000
validate again should all work oops so
clearly I have got a mistake so public
dns name why doesn't a load balancer

123
00:19:44.000 --> 00:19:52.000
have a public dns name that's that sort
of odd to me let me go back to the
documentation since load balances I was

124
00:19:52.000 --> 00:19:58.000
not familiar with i can again reference
the documentation
and look at what are the gate at values

125
00:19:58.000 --> 00:20:06.000
which a load balancer provides me these
are the output values and I quickly
notice it's not public dns name its dns

126
00:20:06.000 --> 00:20:20.000
name so i can copy that value over bring
it to to my template designer and
quickly make that change so you see how

127
00:20:20.000 --> 00:20:28.000
we are helping you with the validate
function to be able to quickly make
these changes and checks and not have to

128
00:20:28.000 --> 00:20:38.000
go through full deploy and update cycles
the deployment will still find errors if
they exist which are outside of the

129
00:20:38.000 --> 00:20:47.000
validate template so I want to make sure
that I save my local file because once
you go and update the stack this

130
00:20:47.000 --> 00:20:56.000
template will no longer be available if
the update fails so I do a file save as
and save this file locally so I have a

131
00:20:56.000 --> 00:21:05.000
valid template all of my changes ready
ready to go and at this point I can
click launch and go update my stack in

132
00:21:05.000 --> 00:21:19.000
there so really quickly we saw how easy
it was to start from a simple template
make additions make updates create

133
00:21:19.000 --> 00:21:31.000
relationships and be able to upload
those changes in there so I want to
quickly recap all the different aspects

134
00:21:31.000 --> 00:21:38.000
of the designer which we have demoed
today and showed you you saw the toolbar
navigation this is where you're going to

135
00:21:38.000 --> 00:21:48.000
open file save files you're going to do
validation of your template both from
schema validation when you send it to

136
00:21:48.000 --> 00:21:57.000
the service as well as the refresh on
the right which validates whether the
component level Jason meets you know

137
00:21:57.000 --> 00:22:06.000
meets the basic requirements the
resource pallet this will contain all of
your supported AWS resources which cloud

138
00:22:06.000 --> 00:22:14.000
formation supports
it's organized by service and you can
drag and drop this onto the canvas we've

139
00:22:14.000 --> 00:22:21.000
used the same color coding for icons
that you see in all of the AWS sort of
services so that should help you give a

140
00:22:21.000 --> 00:22:32.000
visual clues on that the designer canvas
we saw how it helps you with all the
different relationship types you saw

141
00:22:32.000 --> 00:22:41.000
containment relationships there's arrows
relationship we've got references we've
got depends upon we've got function get

142
00:22:41.000 --> 00:22:55.000
at all of dependencies are visualized
within the designer and finally the code
editor in the code editor not only were

143
00:22:55.000 --> 00:23:04.000
you able to open you know your existing
template and be able to format it but
actually use control space code

144
00:23:04.000 --> 00:23:12.000
completion and get you know some help
with what are the properties available
which you may not already have specified

145
00:23:12.000 --> 00:23:25.000
and then with that I conclude the
section on CloudFormation designer I
request you guys to go give it a try we

146
00:23:25.000 --> 00:23:31.000
really appreciate feedback on that it's
a it's a new feature so we're going to
iterate quickly on it and I'm going to

147
00:23:31.000 --> 00:23:47.000
hand it over to Chris to walk you
through the rest of the sections thank
cool thanks Hamish X so we'll start off

148
00:23:47.000 --> 00:23:53.000
just by talking about what are the
services that CloudFormation supports
when you think about code as

149
00:23:53.000 --> 00:24:00.000
infrastructure you typically think about
network compute storage but what 
CloudFormation provides is a much more

150
00:24:00.000 --> 00:24:07.000
comprehensive broad set of services
ranging obviously from network compute
and storage but also including things

151
00:24:07.000 --> 00:24:14.000
like the application things that you
need like choose streams whatever you
need to build the application so any of

152
00:24:14.000 --> 00:24:21.000
those things that you need to build the
application you can also include in the
template and we're also moving up the

153
00:24:21.000 --> 00:24:27.000
stack so you will go through them but if
you look at there we also do things like
code deploy so not only can you deploy

154
00:24:27.000 --> 00:24:33.000
the infrastructure you need to build the
application you can also start to deploy
some other operational pieces that you

155
00:24:33.000 --> 00:24:41.000
need in order to run it once it's there
and then on a higher level things like
amazon workspaces where maybe you want

156
00:24:41.000 --> 00:24:48.000
to deploy a new account has VPCs it
has all the kind of infrastructure
pieces but you may also want to put some

157
00:24:48.000 --> 00:24:55.000
of that enterprise management tools in
there as well so let's go through some
of the new ones that we just added so

158
00:24:55.000 --> 00:25:03.000
we've extended lambda we now allow you
to support event sources so if you use
lambda and you have kinesis streams or

159
00:25:03.000 --> 00:25:12.000
DynamoDB streams then you can use CloudFormation
to connect the lambda function
up to those those streams we also

160
00:25:12.000 --> 00:25:23.000
support now spot fleets so spot fleets is a
feature that EC2 provides it allows you
to create a set of instances with spot

161
00:25:23.000 --> 00:25:29.000
price so you can you spot prices to
create instances it's a fleet you give
it the size of the fleet that you want

162
00:25:29.000 --> 00:25:37.000
and the bid price and it maintains how
many instances are in that fleet so now
you can create fleets using spot through

163
00:25:37.000 --> 00:25:46.000
CloudFormation we've extended out the
RDS support so we now support Aurora we
also support the new database that we

164
00:25:46.000 --> 00:25:56.000
announced yesterday so that all of the
RDS database engines and I suppose to
CloudFormation we've added simpleAD so

165
00:25:56.000 --> 00:26:02.000
you can create simple active directory within
a CloudFormation template and you can create

166
00:26:02.000 --> 00:26:09.000
any instances and join them to that
directory within the template so you can
now create a fully ad managed system

167
00:26:09.000 --> 00:26:16.000
through a CloudFormation template we've
added code deploy so now you can use
CloudFormation to create the

168
00:26:16.000 --> 00:26:21.000
infrastructure and set up the
application and the deployment groups
you need in order to deploy code through

169
00:26:21.000 --> 00:26:28.000
code deploy once all that infrastructure
is in place so that's kind of a nice
interaction between CloudFormation to

170
00:26:28.000 --> 00:26:36.000
manage the infrastructure and then code
deploy to manage the application
lifecycle and like I said before we've

171
00:26:36.000 --> 00:26:44.000
added workspaces so if you provision
your new accounts and you want to put
workspaces in there for customers to use

172
00:26:44.000 --> 00:26:53.000
in that account you can now provision
that too so let's talk a little bit
about CloudFormation and what it can

173
00:26:53.000 --> 00:27:01.000
bring to the organization so last year
we talked a little bit about using cost
explorer with CloudFormation so

174
00:27:01.000 --> 00:27:08.000
whenever you create resources from a
CloudFormation template will tag all of
the instances all of the resources in

175
00:27:08.000 --> 00:27:16.000
that template with the stack ID and the
stack name so any of the resources will
be tagged automatically you can use that

176
00:27:16.000 --> 00:27:24.000
within cost explore and now within
budget to actually figure out what is
the cost of the stack how much is the

177
00:27:24.000 --> 00:27:32.000
stack costing over time and with
budgets you can actually do an analysis
of what will this cost so it gives you

178
00:27:32.000 --> 00:27:40.000
a user's history to figure
out what's going to happen in the future
and then you can add notifications to

179
00:27:40.000 --> 00:27:49.000
that so you say I want a notification if
I'm going to hit my whatever cost limit
I put on that or I'm going to add a

180
00:27:49.000 --> 00:27:56.000
notification if we think this is going
to hit the cost limit within that month
and so you have some flexibility there

181
00:27:56.000 --> 00:28:03.000
to do use stacks and to be able to
manage the cost of a stack and budget
the cost of a stack through using the

182
00:28:03.000 --> 00:28:14.000
tagging that we provide CloudFormation
is integrated with CloudTrail
so whenever you make an API call either

183
00:28:14.000 --> 00:28:21.000
through the management console through
the SDKs if you're automating on top or
through the CLI all of those API calls

184
00:28:21.000 --> 00:28:29.000
the CloudFormation are logged in CloudTrail
as our a lot of other services and
it's a growing set of services that are

185
00:28:29.000 --> 00:28:37.000
integrated with CloudTrail and so what
you'll see is cloudtrail will collect
all those logs you'll see the

186
00:28:37.000 --> 00:28:44.000
CloudFormation entries let's say I create the
stack you'll also see CloudFormation
call all these other services to create

187
00:28:44.000 --> 00:28:51.000
the resources so within the cloudtrail
log you can see the full history of what
happened as you created the stack or

188
00:28:51.000 --> 00:29:00.000
updated the stack and you can store that
in an s3 bucket you can archive that
data you can use the cloudtrail console

189
00:29:00.000 --> 00:29:06.000
to look through those logs to
troubleshoot what happen or you can
connect it up to cloud watch logs and

190
00:29:06.000 --> 00:29:11.000
then add monitoring and alarming on top
of that so if things happen that you
don't expect to happen you can get

191
00:29:11.000 --> 00:29:20.000
notifications for that so let's look a
little bit about some of the
CloudFormation language features so I

192
00:29:20.000 --> 00:29:27.000
wish a ques the few of the features the
language that we have has a few we call
an intrinsic functions built in

193
00:29:27.000 --> 00:29:35.000
functions that allow you to provide data
to some other properties that you might
need so we have things like base64 which

194
00:29:35.000 --> 00:29:43.000
is typically used to fill out the user
data area and an EC2 instance but
obviously you can base64 encode anything

195
00:29:43.000 --> 00:29:49.000
that you want to pass into the template
there's a few conditional functions and
we'll talk a little bit more about

196
00:29:49.000 --> 00:29:58.000
conditions later on we have functions to
find in mappings and we'll talk a little
bit about mappings later and then there

197
00:29:58.000 --> 00:30:03.000
are some other functions like GetAtt
which abhishek showed which is really
about i have a resource i want to be

198
00:30:03.000 --> 00:30:12.000
able to get some of the properties that
were there are as a result of creating
those resources so for example I may

199
00:30:12.000 --> 00:30:18.000
want to get the dns name of a load
balancer and use that somewhere else in
the template so i can use GetAtt for

200
00:30:18.000 --> 00:30:24.000
that we have some functions to do things
like join strings together select
entries

201
00:30:24.000 --> 00:30:31.000
from the list things like that and then
we have Ref what Ref does is that really
gives you the idea of the resource that

202
00:30:31.000 --> 00:30:36.000
you created so if you create the load
balancer and get the load balancer ID if
you create an instance you'll get an

203
00:30:36.000 --> 00:30:46.000
instance ID and so on so you can use
that and as data in the template let's
talk about extending CloudFormation

204
00:30:46.000 --> 00:30:54.000
there's a multiple ways to extend
CloudFormation you may have resources that
CloudFormation doesn't yet support in

205
00:30:54.000 --> 00:31:01.000
AWS or you may have resources
that are not AWS resources so let's
take a look at that that last example so

206
00:31:01.000 --> 00:31:09.000
let's say I have a stack this is a
fairly simple kind of web application
has a load balancer has some on auto

207
00:31:09.000 --> 00:31:18.000
scaling group with instances cloudwatch
alarms code deploy and maybe a cache and
I want to link it up to some web

208
00:31:18.000 --> 00:31:27.000
analytics service that outside of AWS
so I might I do that so the first
way to look at it is

209
00:31:27.000 --> 00:31:35.000
you can use CloudFormation to
create the stack as you create the stack
any things that CloudFormation does we

210
00:31:35.000 --> 00:31:43.000
send out as event so every time we
create a resource will send a create
event every time we complete creating

211
00:31:43.000 --> 00:31:48.000
that resource will send an event so you
get a full life cycle of events and that
shows up in the events tag

212
00:31:48.000 --> 00:31:59.000
on the console you can also subscribe
an SNS topic to that event stream and
then from there obviously you have an

213
00:31:59.000 --> 00:32:05.000
event stream of things that are
happening as the stack is created you
can do whatever you want with our event

214
00:32:05.000 --> 00:32:14.000
stream so in this example we may attach
a worker to that SNS topic and as the
stack is created at some point based on

215
00:32:14.000 --> 00:32:21.000
which resource it is that we want to or
whether it's on stack completion we can
then use a worker to register that stack

216
00:32:21.000 --> 00:32:32.000
into my web analytics service so that's
one way of kind of extended out CloudFormation 
with this model the entry in

217
00:32:32.000 --> 00:32:39.000
the web analytics tool is created
asynchronously to the stack
CloudFormation knows nothing about the web

218
00:32:39.000 --> 00:32:46.000
analytics service is just something that
happened as a result of stack creation
so what happens if I actually want

219
00:32:46.000 --> 00:32:56.000
CloudFormation to understand more about
the things that are not supported yet or
things outside of AWS. CloudFormation has

220
00:32:56.000 --> 00:33:06.000
a notion of custom resources so custom
resources as our extensibility point for
resources in CloudFormation let's take

221
00:33:06.000 --> 00:33:13.000
the same example I have the same website
again I have the same web analytics now
I want to be able to describe in my

222
00:33:13.000 --> 00:33:20.000
template that I actually want to
register with the web analytics service
so I can create a resource I can add the

223
00:33:20.000 --> 00:33:28.000
definition of that resource into my
template a custom resource definition
looks just like any other resource

224
00:33:28.000 --> 00:33:38.000
definition has a type type something you
do you define as the use of that or the
creator of that and it has a set of

225
00:33:38.000 --> 00:33:45.000
properties the things I need in order to
create that resource it has one special
property which is called service token

226
00:33:45.000 --> 00:33:54.000
and that's really an indication to
CloudFormation of where to send messages 
when we get to create that resource we know

227
00:33:54.000 --> 00:34:02.000
nothing about that resource but we know
it exists so what will happen is as
CloudFormation provisions the stack it

228
00:34:02.000 --> 00:34:11.000
will get to that resource and we'll send
an SNS message in this case
to whatever endpoint you've described at

229
00:34:11.000 --> 00:34:17.000
that point you've got a create message an
update message or a delete message
depending on what the stack operation

230
00:34:17.000 --> 00:34:25.000
you performed was you can do that
functionality register in this case with
the web analytics service and return

231
00:34:25.000 --> 00:34:33.000
success or failure if it failed if it
fails in this case in X tax rate we'll
treat that as a failure just like any

232
00:34:33.000 --> 00:34:40.000
other resource failure as in update so
we'll either fail the stacked creation or
roll back to stack update you can also

233
00:34:40.000 --> 00:34:48.000
pass back metadata so maybe when you
create this resource you have some data
you want to pass back into the template

234
00:34:48.000 --> 00:34:53.000
to use further in the template so 
maybe I'm passing tracking ID back 
here but I can then use

235
00:34:53.000 --> 00:35:04.000
later on in the template so it looks and
feels to CloudFormation just like any
other resource so in

236
00:35:04.000 --> 00:35:13.000
this case the assumption is that the
endpoint in this case the web analytics
service understands the SNS protocol

237
00:35:13.000 --> 00:35:20.000
that CloudFormation uses. if the
service itself doesn't understand that
then you can create what we call a

238
00:35:20.000 --> 00:35:28.000
bridge, a custom resource bridge, and
that's really a protocol converter if
you like, it takes the inbound messages

239
00:35:28.000 --> 00:35:36.000
and does whatever functionality you need
to call on the other end obviously to
run that bridge you need it to run it

240
00:35:36.000 --> 00:35:44.000
somewhere and we have in the previous
reinvent presentation we describe
different ways to do that but you still

241
00:35:44.000 --> 00:35:54.000
do have to run it somewhere and so what we
did this year is we added lambda backed
custom resources so that gives you a way

242
00:35:54.000 --> 00:36:02.000
to create custom resources where the
implementation of that resource is really implemented using

243
00:36:02.000 --> 00:36:10.000
lambda functions so you don't have to
run an EC2 instance some way to do that
protocol conversion so in this case you

244
00:36:10.000 --> 00:36:17.000
can add a lambda function the only real
difference between a custom resource for
lambda versus a custom resource that

245
00:36:17.000 --> 00:36:25.000
uses SNS is the service token in the
case of lambda it references a lambda
function and that's the function will

246
00:36:25.000 --> 00:36:34.000
call from there you can do whatever you
need to do within that lambda function
so here's some examples you might decide

247
00:36:34.000 --> 00:36:44.000
that I want to Lambda function to look
up AMI IDs maybe I have custom AMI IDs
maybe I'm looking up what's the latest

248
00:36:44.000 --> 00:36:50.000
windows AMI ID or the latest amazon
Linux AMI ID i can use a custom
function to look that up calling the

249
00:36:50.000 --> 00:36:59.000
APIs and then return that data back to
CloudFormation to use later in the
template I may want to look up VPC IDs

250
00:36:59.000 --> 00:37:07.000
or subnet if I have chosen to split
my implementation into multiple
stacks maybe have a VPC stack

251
00:37:07.000 --> 00:37:14.000
that contains the VPCs the
subnet or network configuration
and I have a separate stack which is the

252
00:37:14.000 --> 00:37:22.000
application stack and I want to be able
to get that VPC ID and that subnet ID so
that I can pass it into where I want to

253
00:37:22.000 --> 00:37:30.000
create the instances and so I could
write a lambda function that looks for
the specific VPCs or the specific

254
00:37:30.000 --> 00:37:37.000
subnets and returns that back into the
template or maybe I just want to do all
the function we support things like join

255
00:37:37.000 --> 00:37:45.000
and select but maybe you want to split a
string and return pieces of a string or
maybe you want to reverse a string or

256
00:37:45.000 --> 00:37:52.000
whatever you want to do you can pass
data to that function and return data
back from that function and use later in

257
00:37:52.000 --> 00:38:02.000
the template so that's kind of the use
case for extended CloudFormation using
three different mechanisms that give you

258
00:38:02.000 --> 00:38:08.000
different semantics (语义) different 
properties but definitely a way to look at 
if you have resources that are not a dovish

259
00:38:08.000 --> 00:38:18.000
resources or if you want to add
resources that are AWS resources that
CloudFormation walls and yet support so

260
00:38:18.000 --> 00:38:30.000
let's look a little bit about security
so we'll take you this in multiple steps
when you create a stack or your update

261
00:38:30.000 --> 00:38:37.000
to stack typically you pass a template
and you may pass a stack policy for
those who don't know what a stack policy

262
00:38:37.000 --> 00:38:46.000
is it's a JSON document that
describes what can you do during an
update operation so maybe I don't ever

263
00:38:46.000 --> 00:38:56.000
want to update my database regardless of
what happens or maybe I am okay updating
it as long as it doesn't replace it so

264
00:38:56.000 --> 00:39:02.000
you can describe policies like that and
the policy document so essentially when
you call create or update you can pass a

265
00:39:02.000 --> 00:39:12.000
template as well as a policy document
what we've added and we announced last
week is the ability to describe for

266
00:39:12.000 --> 00:39:22.000
particular users or roles or groups
of users through IAM where those
artifacts come from so

267
00:39:22.000 --> 00:39:32.000
for example on the left there we chose
an IAM policy snippet which really says
for create stack and for update stack

268
00:39:32.000 --> 00:39:41.000
whereabouts is this user whatever this
policy is attached to where can that
template come from and in this case is

269
00:39:41.000 --> 00:39:47.000
restricting that user to a specific
bucket so templates always have to come
from that bucket for this particular

270
00:39:47.000 --> 00:39:58.000
particular user on the right hand side
there it's really the stack policy
document and in this case we're actually

271
00:39:58.000 --> 00:40:04.000
fixing it to say this user has to use
this policy document so it gives you
flexibility either way to say either

272
00:40:04.000 --> 00:40:12.000
things have to come from a specific
bucket or they have to be a specific
object as you do those stack operations

273
00:40:12.000 --> 00:40:19.000
so that's one way to kind of restrict
user access to which templates can be
used which stack policies can be applied

274
00:40:19.000 --> 00:40:30.000
we then take it a step further which is
maybe your users have permissions to
create lots of different resources in

275
00:40:30.000 --> 00:40:38.000
CloudFormation or actually in AWS and
their account but you want to be able to
restrict what this user can do within

276
00:40:38.000 --> 00:40:48.000
the context of CloudFormation and so we
let you on a user basis or on a
policy basis describe which resource

277
00:40:48.000 --> 00:40:57.000
types can this IAM principal actually use
so for example on the left hand side
there we're saying that this user or

278
00:40:57.000 --> 00:41:05.000
whatever policy this is attached to they
can only create resources of type EC2
instance and you can add a list there so

279
00:41:05.000 --> 00:41:10.000
that list can be any set of resources
that CloudFormation supports and we all
support also support wild carding so you

280
00:41:10.000 --> 00:41:20.000
may say AWS::EC2::* if you want to
allow all EC2 access and on the
right hand side was saying

281
00:41:20.000 --> 00:41:29.000
this user can create anything in the
context of a stack except for IAM related
resources so it gives you a way by

282
00:41:29.000 --> 00:41:34.000
default deny will override any other
defaults out of there so will 
essentially open it or

283
00:41:34.000 --> 00:41:42.000
not but narrowing it down to say
everything but IAM resources so gives
you some flexibility and how you allow

284
00:41:42.000 --> 00:41:51.000
customers to create things in the
context of CloudFormation we also for
those that automate on top of

285
00:41:51.000 --> 00:41:56.000
CloudFormation maybe you build your own
infrastructure on top of CloudFormation
maybe it's scripts using the CLI maybe

286
00:41:56.000 --> 00:42:05.000
it's calling the APIs create stack and
updates take a new parameter and
what that parameter let you do is

287
00:42:05.000 --> 00:42:13.000
restrict the set of resources or
resource types that can be created
through this call so maybe your

288
00:42:13.000 --> 00:42:22.000
automation you know that in your
environment there are only a certain set
of things that should be created by this

289
00:42:22.000 --> 00:42:29.000
template then you can use
that new parameter to define the set of
things if anything tries to be created

290
00:42:29.000 --> 00:42:37.000
that outside that set will fail the
stacked create of a stack of line so I
give you some level of control through

291
00:42:37.000 --> 00:42:49.000
automation so let's talk a little bit about
templates so right in templates one
of the things you have to be a little

292
00:42:49.000 --> 00:42:55.000
bit careful of especially if you are
given this template to other people in
the organization or even outside the

293
00:42:55.000 --> 00:43:03.000
organization is your environment may be
different than their environment and so
how do you write templates that adapt to

294
00:43:03.000 --> 00:43:10.000
the environmental constraints that the
particular user has and so here's some
examples of things that may change from

295
00:43:10.000 --> 00:43:18.000
environment to environment or region to
region things like AMI IDs are
different across the regions maybe you

296
00:43:18.000 --> 00:43:25.000
have to have a template the works in
both of VPC as well as EC2 classic
environment the instance types changed

297
00:43:25.000 --> 00:43:36.000
by region so the set of possible
instance types may be different policy
names policy principles may be different

298
00:43:36.000 --> 00:43:42.000
so for example the elastic load
balancing principle you need for logging
is actually different in each of the

299
00:43:42.000 --> 00:43:48.000
regions and so you need to be able
to define what that is or endpoint
names s3 end point in us-east-1

300
00:43:48.000 --> 00:43:57.000
is a three-day amazon AWS com has
the region in all the regions in that
name or the ARN format may be different

301
00:43:57.000 --> 00:44:04.000
so for example if you have to right
tempo the works in cn-north-1 the
ARN and format for that region is

302
00:44:04.000 --> 00:44:12.000
different than the ARN format for
other regions there's a lot of different
things there that you may need to react

303
00:44:12.000 --> 00:44:22.000
to based on wherever that template is
created or who creates it so the first
thing to look at is kind of 

304
00:44:22.000 --> 00:44:30.000
pseudo-parameters so these are variables if you
like that we pass in automatically into
your template creation and we give you

305
00:44:30.000 --> 00:44:39.000
account ID, the account ID of the whoever
it was that created it, we give you the
region, the region in which this template

306
00:44:39.000 --> 00:44:46.000
this stack is being created, and we give
you the stack name in the stack ID so
you can reference all of those different

307
00:44:46.000 --> 00:44:55.000
environmental properties from within the
template so the example below their sets
up a bucket policy for elb

308
00:44:55.000 --> 00:45:05.000
bucket archiving where we're actually
using that account ID as part of the
object name in the policy to restrict

309
00:45:05.000 --> 00:45:19.000
down where elb can put its logs for this
particular account another way to do it
is to use mappings so mapping is a

310
00:45:19.000 --> 00:45:26.000
section in the template that's really
used to define a set of variables
depending on some selection if you like

311
00:45:26.000 --> 00:45:32.000
that you want to make so if you look at
the definition on the left hand side
there a mapping has a name in this case

312
00:45:32.000 --> 00:45:41.000
RegionalConfig and then within that
you have sections based on some
selection so in this case i'm using the

313
00:45:41.000 --> 00:45:48.000
region as a selection mechanism
us-east-1 us-west-1 you could use
anything there so maybe a parameter that

314
00:45:48.000 --> 00:45:55.000
you type in maybe you want the customer
to specify small medium large I can use
small medium large there and have

315
00:45:55.000 --> 00:46:03.000
different property values depending
what we selected or any other variable
or property name you can use to do that

316
00:46:03.000 --> 00:46:10.000
selection so in this case for each
region I have an AMI what's the AMI
ID that I should use that region

317
00:46:10.000 --> 00:46:19.000
what's the elb account ID that I should
use for logging as well as what's the ARN
prefix for this region and then within

318
00:46:19.000 --> 00:46:27.000
the rest the body of the template I can
use the FindInMap function so on the
right-hand side there for the resource

319
00:46:27.000 --> 00:46:36.000
in there in the policy document we use
in FindInMap from the RegionalConfig
using the region as a selector to find

320
00:46:36.000 --> 00:46:46.000
the ARN prefix that we should use so
it's another way to get regional or
other environmental differences into the

321
00:46:46.000 --> 00:46:56.000
template another option you have is
conditionals so maybe there are cases
where under some conditions you want to

322
00:46:56.000 --> 00:47:01.000
create a resource and on all the
conditions you don't want to create the
resource from within that template or

323
00:47:01.000 --> 00:47:10.000
maybe there are property values that you
want to pass in or not pass in based on
some condition so CloudFormation gives

324
00:47:10.000 --> 00:47:18.000
you a condition section and what the
conditions section does is essentially
define a set of conditional expressions

325
00:47:18.000 --> 00:47:24.000
that you can use later on in
the template so in this example I
actually have an account it was created

326
00:47:24.000 --> 00:47:36.000
before VPC was the default for EC2 and
so a lot of my regions have classic but
the eu-central-1 region and the

327
00:47:36.000 --> 00:47:44.000
cn-north-1 region were VPC by default for
everybody and so I have an account that
is split depending on which region I'm

328
00:47:44.000 --> 00:47:53.000
creating it so in this case i'm setting
up a condition which says is this EC2
for VPC or is this a classic EC2 region

329
00:47:53.000 --> 00:48:03.000
and i'm using some of the conditional
functions like "or", "and", "not", we have all
those functions as well as "equals"

330
00:48:03.000 --> 00:48:10.000
to actually describe the conditions on the
witch it's an EC2 VPC environment or
it's a classic environment

331
00:48:10.000 --> 00:48:20.000
so in this case I have it's a VPC
environment if the region is eu-central
or if it's cn-north-1 and on the

332
00:48:20.000 --> 00:48:28.000
right-hand side is how we use those
conditionals so I have there's two use
cases here one is for resources and the

333
00:48:28.000 --> 00:48:35.000
other one is for properties so in the
case of a classic region I want to
create DB security groups in order to

334
00:48:35.000 --> 00:48:47.000
secure my database in VPC region I want
to use EC2 security group for the same
thing what i can do is at the top

335
00:48:47.000 --> 00:48:53.000
level of the resource definition where
you add type and properties we also
allow you to put the condition statement

336
00:48:53.000 --> 00:49:01.000
and reference a conditioner was defined
in the conditions section if that
condition evaluates to true will create

337
00:49:01.000 --> 00:49:08.000
that resource if that expression
evaluates to false we won't create that
results we'll just skip it so in this

338
00:49:08.000 --> 00:49:17.000
case if it's a VPC region I'm creating a
an EC2 security group if it's a
classic region I'm creating a DB

339
00:49:17.000 --> 00:49:24.000
security group then I need to be able to
select when I'm creating the instance
which particular wanted security group I

340
00:49:24.000 --> 00:49:32.000
actually want and they're actually
passed in as different properties so in
the case of a VPC I'm going to pass in

341
00:49:32.000 --> 00:49:40.000
the VPC security group name and I'm
going to use the "If" statement that we
provide that says if the EC2 VPC

342
00:49:40.000 --> 00:49:48.000
condition holds then use the group ID
from the EC2 security group that was
created earlier in the template and

343
00:49:48.000 --> 00:49:54.000
notice I'm using the same condition now
so we can guarantee that if this
condition holds true then I already

344
00:49:54.000 --> 00:50:03.000
created that previous resource we also
have a special value in this case called
NoValue what that does is if a

345
00:50:03.000 --> 00:50:09.000
conditional expression evaluates to 
NoValue we'll skip that property so
we won't pass that property to the

346
00:50:09.000 --> 00:50:19.000
underlying service so in this case if
I'm in a classic region so is EC2 VPC of
i hate's to false we won't pass the VPC

347
00:50:19.000 --> 00:50:28.000
security groups property to RDS 
when we create that database 
instance so it gives you a way

348
00:50:28.000 --> 00:50:36.000
to selectively decide which resources
you want to create and then selectively
which property you want to pass to the

349
00:50:36.000 --> 00:50:46.000
underlying services so that's kind of
what we had for today just kind of in
conclusion we saw kind of the 

350
00:50:46.000 --> 00:50:54.000
CloudFormation designer overview and
hopefully you guys are excited as we are
for that we talked a little bit about

351
00:50:54.000 --> 00:51:11.000
CloudFormation in your organization as
well as some advanced concepts and some
best practices so thank you for coming
fill out the evaluation forms that's
definitely good feedback for us