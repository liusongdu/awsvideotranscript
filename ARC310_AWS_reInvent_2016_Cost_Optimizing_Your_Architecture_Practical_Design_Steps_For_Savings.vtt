WEBVTT FILE

1
00:00:00.000 --> 00:00:08.000
good morning everyone how's it run this
morning pretty exciting keynote there a
few presents for people thanks so much

2
00:00:08.000 --> 00:00:13.000
for joining me today Simon Alicia I'm
ahead of solution architecture for
public sector in Australia and New

3
00:00:13.000 --> 00:00:20.000
Zealand you might remember me for such
podcast as the AWS podcasts if you're a
listener thank you if you're not a

4
00:00:20.000 --> 00:00:29.000
listening why not sign up come on we're
going to be doing a lot today a lot so
once this wakes up there we go it's a

5
00:00:29.000 --> 00:00:35.000
wake down like most of us we're going to
dive right in this is a more advanced
session so I'm not going to explain what

6
00:00:35.000 --> 00:00:40.000
different services doing all that sort
of stuff he clipped that up yourself
we're going to cover quite a lot in a

7
00:00:40.000 --> 00:00:48.000
hurry many different domains and the
objective here is to give you things to
take away and actually do if you walk

8
00:00:48.000 --> 00:00:54.000
out of this issue with one or two
meaningful cost-saving ideas that you
can actually execute in your environment

9
00:00:54.000 --> 00:01:00.000
I'll personally be exceptionally happy
and I'm hoping you will too that's the
intent and we're going to cover three

10
00:01:00.000 --> 00:01:06.000
main domains we're going to cover
operational optimization infrastructure
optimization and architectural

11
00:01:06.000 --> 00:01:14.000
optimization so there's kind of
something for everyone here now the idea
here is to show you the money I want to

12
00:01:14.000 --> 00:01:21.000
show you where the opportunities for
savings exist and Verna gave you a whole
bunch of new toys today so you can take

13
00:01:21.000 --> 00:01:25.000
those cost savings and invest them in
other things if you want to as well but
the idea is to show you where you can

14
00:01:25.000 --> 00:01:31.000
get the money now I've tried to make
this a bit easy because there's a lot of
maths going on here a lot of numbers

15
00:01:31.000 --> 00:01:38.000
there's decimal places it gets a little
confusing so using this sort of little
star system that will show you the types

16
00:01:38.000 --> 00:01:45.000
of cost savings these are real
percentages that i'll be showing you
today now i'll point out two things

17
00:01:45.000 --> 00:01:51.000
firstly all the pricing i'm going to be
using is from the sydney region just
because that's where i happen to reside

18
00:01:51.000 --> 00:01:58.000
so it's easy for me to calculate apply
your own local region pricing but the
concepts will be the same and the

19
00:01:58.000 --> 00:02:04.000
percentage savings will likely be almost
exactly the same the other thing is some
of my pricing that I've used will be out

20
00:02:04.000 --> 00:02:10.000
of date today that's one of the joys of
working at Amazon you do all this work
you prepare what do they do they cut the

21
00:02:10.000 --> 00:02:15.000
prices and I can't be upset about that
that's a great news for you
but again the savings will still remain

22
00:02:15.000 --> 00:02:22.000
that you'll see that so I did want to do
the quick wins the obvious stuff this is
not a basic session but this is the do

23
00:02:22.000 --> 00:02:27.000
not pass go do not collect your hundred
dollars unless you do this already the
first thing is you use reserved

24
00:02:27.000 --> 00:02:35.000
instances for stable workloads now what
is the magic rule of thumb that most
customers find successful here run your

25
00:02:35.000 --> 00:02:42.000
system for three months get an
understanding of what the workload
actually looks like spend a little bit

26
00:02:42.000 --> 00:02:48.000
of time tuning spend a little bit of
time optimizing then make your RI
commitment and your commitment could be

27
00:02:48.000 --> 00:02:54.000
a one year could be a three year could
be the new convertible ones totally your
choice doesn't really matter but invest

28
00:02:54.000 --> 00:03:01.000
in something for those stable workloads
once you understand them well the second
thing that you must do is use

29
00:03:01.000 --> 00:03:08.000
consolidated billing because you will
receive discounts with doing no effort
there are many services that are tiered

30
00:03:08.000 --> 00:03:15.000
based et tu s3 cloud front if you
consolidate your spend you automatically
get given the discount money for nothing

31
00:03:15.000 --> 00:03:24.000
so do it so thursday morning in vegas i
am now pretty much one hundred percent
starbucks Frappuccino powered so i don't

32
00:03:24.000 --> 00:03:30.000
feel bad putting this slide up let's
talk about some of the sweet good juicy
stuff so that's eleven o'clock i figure

33
00:03:30.000 --> 00:03:38.000
this abyss it work I like these kinds of
dana's myself so we talk a lot about
architecture we architect for

34
00:03:38.000 --> 00:03:46.000
availability we architect for
performance for security for function we
spend a great deal of time doing this

35
00:03:46.000 --> 00:03:56.000
but I contend there is a new domain for
architecture and that is economy when
you're building your systems you need to

36
00:03:56.000 --> 00:04:04.000
look at the economy of your architecture
because you have a great deal of control
over it so what I mean by economy of

37
00:04:04.000 --> 00:04:11.000
architecture I mean the same or better
outcome for a lower cost and i'll show
you how we can actually do that today

38
00:04:11.000 --> 00:04:20.000
i'm talking about the ability to trial
and change the way the system is built
during its own lifetime we need to move

39
00:04:20.000 --> 00:04:26.000
away from this model of heavy up front
design some finger in the air
predictions of what capacities will need

40
00:04:26.000 --> 00:04:31.000
and what
all the application will run and instead
embrace the idea of radical change

41
00:04:31.000 --> 00:04:38.000
during its life cycle funded by cost
savings now there's degrees that you can
do this depending on whether you built

42
00:04:38.000 --> 00:04:43.000
the system yourself or you're using a
commercial off-the-shelf system I'll be
showing you options that apply to either

43
00:04:43.000 --> 00:04:50.000
now radical changes are possible and
they're driven by economics and more
importantly they often driven by the

44
00:04:50.000 --> 00:04:57.000
appearance of new services like you saw
today that dramatically lower the cost
of some of the undifferentiated heavy

45
00:04:57.000 --> 00:05:02.000
lifting of IT a service you may have
invested significant time effort and
money in building yourself you could

46
00:05:02.000 --> 00:05:11.000
probably consume cheaper from somewhere
else replace in your system the other
aspect I think is really interesting and

47
00:05:11.000 --> 00:05:18.000
this is a growing area of interest in
the community is around transactional
costs and operational costs so i have a

48
00:05:18.000 --> 00:05:24.000
question is the only participation part
of the talk today the first two rows
will not get wet so it's not that sort

49
00:05:24.000 --> 00:05:30.000
of participation but i have a question
for you as soon as my little clicker
works there we go who knows what theyre

50
00:05:30.000 --> 00:05:38.000
per transaction cost is for their
favorite application not many people who
here knows what their cost per hour is

51
00:05:38.000 --> 00:05:45.000
to operate systems that they're
responsible for good okay that's getting
better who tracks it in real time and

52
00:05:45.000 --> 00:05:54.000
sticks up on a board in the corner yep
couple very representative of my
investigations with customers most of us

53
00:05:54.000 --> 00:06:03.000
run and operate systems and have no idea
what they actually cost from a business
centric perspective so here's the

54
00:06:03.000 --> 00:06:07.000
challenge I could have gone down this
direction for the whole talk I'm not
going to but I want to give you a little

55
00:06:07.000 --> 00:06:14.000
something just to give a teaser as we go
there are some actionable steps you need
to take in this area the beginner one is

56
00:06:14.000 --> 00:06:20.000
simply do it by hand sit down with cost
Explorer figure out your transaction
rates and do some rough calculations and

57
00:06:20.000 --> 00:06:27.000
either be pleasantly surprised or really
really shocked depends intermediate you
gather these transaction volumes in real

58
00:06:27.000 --> 00:06:33.000
time from your systems and you still
calculate by hand but the advanced one
is you monitor in real time you can plug

59
00:06:33.000 --> 00:06:38.000
transaction rate into something like
Kinesis fire hose and run Kinesis
analytics on it and pull out

60
00:06:38.000 --> 00:06:44.000
a really interesting data in real time
now what's my average transaction flow
versus my average infrastructure costs

61
00:06:44.000 --> 00:06:53.000
and put it up in the corner and say hey
dev team optimize that that becomes your
measure so just think about things in

62
00:06:53.000 --> 00:06:58.000
that term as we go through and optimize
some stuff because you need to make this
relevant to your business stakeholders

63
00:06:58.000 --> 00:07:05.000
so let's talk about operational
optimization this is an interesting one
because people don't really think about

64
00:07:05.000 --> 00:07:10.000
this very much because you know your
hire people they do stuff for you I pay
them they come in they do stuff you know

65
00:07:10.000 --> 00:07:15.000
they don't do this stuff they'll do
something other stuff well what does
this stuff actually cost so I thought

66
00:07:15.000 --> 00:07:20.000
I'd have it a bit of an international
investigation so what does it cost for a
systems administrator per hour is just

67
00:07:20.000 --> 00:07:27.000
converted to US dollars around the world
and you can see that you know life in
Brazil as a systems administrator is

68
00:07:27.000 --> 00:07:32.000
pretty good Japan's pretty high as well
but i'm guessing the cost of living is
pretty high but this is just the median

69
00:07:32.000 --> 00:07:37.000
system administrators and none of us in
this room would ever work with just a
median system administrator would it's

70
00:07:37.000 --> 00:07:47.000
not we don't do median dba's are the
same interestingly the parity of DBA per
hour costs compared to system

71
00:07:47.000 --> 00:07:53.000
administrator cost was much closer than
I had thought I don't know how that
happened but again you've got a big

72
00:07:53.000 --> 00:07:59.000
range there you know kind of sucks to be
a DBA in Singapore at the moment but
it's really good in Japan I don't know

73
00:07:59.000 --> 00:08:06.000
but anyway all these things have a cost
so let's think about what the actual
meaning of this cost is so let's talk

74
00:08:06.000 --> 00:08:11.000
about a database upgrade we should be
upgrading our databases on a regular
basis to take patches fixes performance

75
00:08:11.000 --> 00:08:18.000
enhancements etc if you're going to do
one of these yourself you're doing a lot
of work you're going to backup the

76
00:08:18.000 --> 00:08:21.000
primary get it back up the second row
you're going to backup the operating
system you're going to back up the

77
00:08:21.000 --> 00:08:28.000
server you're going to try and find the
binary to do the upgrade with anyone
done that lately yeah that's a fun

78
00:08:28.000 --> 00:08:33.000
morning's work right there then you're
going to create a change record then
you're going to rehearse it in

79
00:08:33.000 --> 00:08:37.000
development because you know this thing
doesn't always go right then you're
going to do it in staging and make sure

80
00:08:37.000 --> 00:08:40.000
it work properly then you do it in
production on the secondary then you'll
fail over then you'll do it on the

81
00:08:40.000 --> 00:08:45.000
primary then you'll make sure it's
working and then if you're lucky you've
just spent eight hours doing something

82
00:08:45.000 --> 00:08:51.000
that has no perceivable value except you
are now today or you could do something
like RDS and say well I'm going to shit

83
00:08:51.000 --> 00:08:56.000
by
we know that I want to apply the update
in I'm going to run it in staging make

84
00:08:56.000 --> 00:09:00.000
sure it's ok running production make
sure it's ok i'm going to create a
notification record just to tell people

85
00:09:00.000 --> 00:09:06.000
i'm doing stuff because that's kind of
nice it'll take me maybe an hour maybe
and the nice thing is when I do it I

86
00:09:06.000 --> 00:09:14.000
have complete control I choose when this
takes place the nature of it I can also
track at great granularity what happened

87
00:09:14.000 --> 00:09:19.000
I can watch it happen either in real
time or save the logs for afterwards and
attach it to the change of record for

88
00:09:19.000 --> 00:09:26.000
auditability so I've been really lazy
and made myself my life a lot easier and
I've saved the company a truckload of

89
00:09:26.000 --> 00:09:37.000
cash depending on where i live just that
activity is anything from 133 dollars
less to 343 dollars less that's real

90
00:09:37.000 --> 00:09:41.000
money msl assignment we're going to
spend that money anyway I've got a high
these people are not going away I said

91
00:09:41.000 --> 00:09:47.000
that's great but you could invest in
that particular chunk of time / money
into something else of more value like

92
00:09:47.000 --> 00:09:55.000
maybe tuning your database might be a
better use of a debased I'm so what
about at the infrastructure layer what

93
00:09:55.000 --> 00:10:03.000
are we going to do there so one of the
big things that people do is invest in
storage and I want to give you a way to

94
00:10:03.000 --> 00:10:08.000
save money on your storage without any
code changes at all so this is really
relevant to people who are running

95
00:10:08.000 --> 00:10:14.000
systems that they might not have code
control over and this is taking
advantage of storage tiers particularly

96
00:10:14.000 --> 00:10:20.000
in frequent access now you need to
understand your usage patterns to take
advantage of this but let's work a real

97
00:10:20.000 --> 00:10:27.000
example here storing 100 terabytes of
photos because that's what my app does
each photos about 10 meg and it costs me

98
00:10:27.000 --> 00:10:35.000
in standard is 3 3292 dollars and
seventy-eight cents per month nice and
resilient safe i love s3 is doing a

99
00:10:35.000 --> 00:10:42.000
great job but you know that's a pretty
decent investment in storage costs what
if i know a bit about my daughter and i

100
00:10:42.000 --> 00:10:49.000
know that my daughter has a long tail so
you know after 30 days most of the data
actually doesn't get access because

101
00:10:49.000 --> 00:10:54.000
people get bored with the pictures i put
up there i'm twenty percent of it maybe
it gets returned once a month with the

102
00:10:54.000 --> 00:11:02.000
odd exception so i can create a policy a
few clicks and say hey apply this policy
to my s3 bucket and move stuff across

103
00:11:02.000 --> 00:11:10.000
BAM thirty-two percent saving
naoko change no effort I'm now spending
two thousand two hundred twenty dollars

104
00:11:10.000 --> 00:11:17.000
and sixty five cents per month that's
not bad so some want to point out here
today's none of what we're talking about

105
00:11:17.000 --> 00:11:25.000
here is five percent saving ten percent
saving 50 we're talking big meaningful
move the needle savings those folks

106
00:11:25.000 --> 00:11:32.000
standing about this heaps of seats
around here if you want to sit down to
what about this one revisit and right

107
00:11:32.000 --> 00:11:38.000
sizing or ec2 instances this is a bad
habit I see people falling into because
we grew up in an age old world your bio

108
00:11:38.000 --> 00:11:42.000
server you live with the server so you
never look at the surface again do you
you're just deploying you get on with

109
00:11:42.000 --> 00:11:49.000
your life well that is not the case in
ec tool and as you saw this week lots of
new instance types to choose from do you

110
00:11:49.000 --> 00:11:57.000
check on a regular basis whether your
instance types match the reality of your
workload who's done it in the last six

111
00:11:57.000 --> 00:12:05.000
months good at least every six months if
not once a quarter the updates in the
idea best blog saying new instance type

112
00:12:05.000 --> 00:12:11.000
available is probably a good cue you can
also use trusted advisor for some hints
on this and I'll share some good news

113
00:12:11.000 --> 00:12:16.000
for you about trusted advisors soon but
let's work an example let's take a
Windows work like that I have running

114
00:12:16.000 --> 00:12:24.000
and let's compare to instance types so
I've got my m4 for x-large cost me just
over two dollars an hour to run in

115
00:12:24.000 --> 00:12:31.000
Sydney I've got my m4 x large cost me
nearly thirty cents in how to run let's
see now I'm running my workload and I

116
00:12:31.000 --> 00:12:36.000
look and I say well what's notable about
that workload well it kind of pegs out
at fifteen percent of the CPU that's

117
00:12:36.000 --> 00:12:41.000
what it does doesn't go higher than that
that's its maximum rate for whatever
reason don't know why that's just what

118
00:12:41.000 --> 00:12:49.000
it does so I can do a trivial change and
change my instance type down to that x
large size and test it because you're

119
00:12:49.000 --> 00:12:54.000
always on a test to make sure we're
doing the right thing and lo and behold
Rome are sitting I'm sitting about sixty

120
00:12:54.000 --> 00:13:00.000
percent now I'm really happy with that
because I'm a conservative kind of guy
don't like running my servers at ninety

121
00:13:00.000 --> 00:13:06.000
percent because wheat stuff happens at
ninety percent doesn't it gets a bit
shady but sixty percent is fine I've can

122
00:13:06.000 --> 00:13:11.000
pick up and down I got no trouble before
I even start using auto scaling groups
so I'm pretty comfortable with this what

123
00:13:11.000 --> 00:13:19.000
have I just done I've saved myself
eighty-seven percent on my ec2 bill now
I would contend that for most customers

124
00:13:19.000 --> 00:13:23.000
are ec2
part of the bill is the biggest part if
you go to the whoever's paying that bill

125
00:13:23.000 --> 00:13:28.000
and say I've just saved you eighty-seven
percent of your ec2 bill you will
probably get a hug you might not want a

126
00:13:28.000 --> 00:13:34.000
hug but i'm pretty sure eighty-five
percent and upwards of savings is the
hug zone that's what i'm calling it

127
00:13:34.000 --> 00:13:40.000
again oh that's a good thing or not you
know we'll just call it what it is so
you can actually use trusted advisor to

128
00:13:40.000 --> 00:13:46.000
help you with some of this stuff it does
give you some really good cost
optimization hints and one of the nice

129
00:13:46.000 --> 00:13:52.000
ones is the low utilization ec2
instances now this is not so much for
the example I just gave you this is for

130
00:13:52.000 --> 00:13:58.000
the ones that are pretty much someone
turned them on and they don't use them
at all like really low network

131
00:13:58.000 --> 00:14:05.000
utilization really low CPU utilization
take advantage of trusted advisor so
let's get a little more fancy shall we

132
00:14:05.000 --> 00:14:15.000
spot instances who uses spot instances
hear they're quite a few they provide
great value for your workloads but for

133
00:14:15.000 --> 00:14:19.000
many people they're only familiar with
using them for maybe dev tests and
highly scalable and embarrassingly

134
00:14:19.000 --> 00:14:26.000
parallel processing type working i think
that are ephemeral but did you know you
can use it in a different way and he

135
00:14:26.000 --> 00:14:32.000
comes the code so this is an auto
scaling group launch configuration in
cloud formation so our first taste of

136
00:14:32.000 --> 00:14:38.000
Jason for the morning just get us up and
going so I didn't convert it to the y ml
version I probably should but ran out of

137
00:14:38.000 --> 00:14:46.000
time so this is the launch configuration
part of our auto scaling group so what
do we do so we duplicate our auto

138
00:14:46.000 --> 00:14:51.000
scaling group so will now have two auto
scaling groups for our application and
we're going to do a hell of a lot of

139
00:14:51.000 --> 00:14:55.000
cottam it could take a long time till
the boss you might not be available for
a week cause you're going to do a lot of

140
00:14:55.000 --> 00:15:04.000
work you're going to add one line to a
large configuration and that one line is
the spot price and automatically you

141
00:15:04.000 --> 00:15:12.000
have turned this launch configuration
which is a new one show picture soon
into a spot instance driven autoscale

142
00:15:12.000 --> 00:15:22.000
group so you've probably seen some
quizzical looks this is how it looks I
have one lb and i'll have to auto

143
00:15:22.000 --> 00:15:29.000
scaling groups one auto scaling group is
my standard on demand or it could be an
RI order scaling group doing its work

144
00:15:29.000 --> 00:15:36.000
quite happily but it's really small my
other auto scaling
though is my spot instance auto-scaling

145
00:15:36.000 --> 00:15:43.000
group and for that i'm going to bid the
higher than the market rate but lower
than the on-demand price now one of the

146
00:15:43.000 --> 00:15:49.000
benefits of the way the spot market
works is even if you bid higher than the
spot price you paid the prevailing rate

147
00:15:49.000 --> 00:15:55.000
so if I bid one dollar and the
prevailing rate is fifty cents I pay
fifty cents so i have to do any work

148
00:15:55.000 --> 00:16:00.000
which is good so as long as I'm bidding
lower than the on demand rate and higher
than a spot rate I'm automatically

149
00:16:00.000 --> 00:16:06.000
saving money of some description they
most i harbored Simon their spot
instances you might not always have them

150
00:16:06.000 --> 00:16:12.000
and i'll say yes you're absolutely right
which is why we will set a cloud watch
alarm on the group in service instances

151
00:16:12.000 --> 00:16:17.000
for the spot instances group and make
sure we have enough capacity there and
if we don't what is that trigger it

152
00:16:17.000 --> 00:16:25.000
triggers our other on-demand orders can
group balancing workload playing with
some stuff technology not too shabby now

153
00:16:25.000 --> 00:16:30.000
we need to understand the price history
to make sure we make an intelligent
approach here luckily we have the

154
00:16:30.000 --> 00:16:37.000
handy-dandy console she's probably been
fancy updated since i made this line and
we can see what the price history is

155
00:16:37.000 --> 00:16:42.000
this is a good example of one in the
city region three az's you can see for
this particular instance type the m3

156
00:16:42.000 --> 00:16:48.000
medium pretty low and steady isn't it
doesn't change much as a little spike in
one spot but it's not one of those ones

157
00:16:48.000 --> 00:16:54.000
it's bouncing all over the place so i've
got pretty good assurance that the price
is generally low so let's work the

158
00:16:54.000 --> 00:17:04.000
example here so I've got to auto scaling
groups spot and on demand my on demand
price is about nine cents an hour for on

159
00:17:04.000 --> 00:17:13.000
demand my spot price that I've seen the
market is about 1.3 sense so if I've got
a 12 server fleet if i use it using just

160
00:17:13.000 --> 00:17:19.000
on demand that's a dollar 17 an hour now
many of you know your hourly cost which
is good you should all know your hourly

161
00:17:19.000 --> 00:17:26.000
cost if i convert it to this model and
aggressively use spot in this scenario
unlikely to be spending 32 cents an hour

162
00:17:26.000 --> 00:17:33.000
or I've saved seventy-two percent now
this is really nifty because firstly
it's kept me out of a hug zone which I

163
00:17:33.000 --> 00:17:38.000
know some of us are not too comfortable
in but we still saved a lot of money how
much I mean seventy two percent off your

164
00:17:38.000 --> 00:17:44.000
bill that's something to be thought
about so let me show you another way to
save a lot of money on your

165
00:17:44.000 --> 00:17:50.000
infrastructure without doing any code
changes
talk about developers we all love

166
00:17:50.000 --> 00:17:57.000
developers developers work hard I was
once one and we you know developers work
on big projects but they never work 24-7

167
00:17:57.000 --> 00:18:01.000
I have worked on projects where it's
happened for a short period of time but
the quality of code goes down very quick

168
00:18:01.000 --> 00:18:07.000
and the coffee increase is just it
doesn't work out well so let's think
about this developers are not working

169
00:18:07.000 --> 00:18:15.000
twenty-four/seven even if they're
working 10 hours a day I've still got
168 hours that nothing is happening shut

170
00:18:15.000 --> 00:18:24.000
stuff off please telling you shut it off
you will save seventy percent it's
interesting a lot of people put a lot of

171
00:18:24.000 --> 00:18:30.000
focus on their IT spend on production
most of the IT spend is actually in
Devon test isn't it that's the little

172
00:18:30.000 --> 00:18:37.000
secret of the industry so how can you
make this easy for yourself well you can
automate it there are many different

173
00:18:37.000 --> 00:18:46.000
ways you can use there is no right way
my imploring to you is to do something
so one example is you can use tagging to

174
00:18:46.000 --> 00:18:51.000
startup and shutdown but be careful with
this I'll share an example from an
Australian customer one of my favorite

175
00:18:51.000 --> 00:18:56.000
customers re a group they were really
advancing the AWS you so they tagged
everything I said we're going to write a

176
00:18:56.000 --> 00:19:03.000
script it's going to go through it if
it's got the right tag it gets shut down
at night awesome only problem there was

177
00:19:03.000 --> 00:19:09.000
a little issue with the code is that if
it called the API didn't get any tags
back i thought i untagged instance shut

178
00:19:09.000 --> 00:19:14.000
it down so it's a bit of an issue with
the API at the time and it was getting
no tags back and it was just happily

179
00:19:14.000 --> 00:19:23.000
going down and shutting off hundreds of
instances it was actually called the
zombie apocalypse and the really kicker

180
00:19:23.000 --> 00:19:28.000
of the story is that the zombie
apocalypse only ended when the instance
that was running the script killed

181
00:19:28.000 --> 00:19:36.000
itself boom so you know use something
but be careful what you use now I want
to give you a list of things to use it

182
00:19:36.000 --> 00:19:41.000
is a completely incomplete list but it's
a good one to take a snapshot of so you
can use lambda you can use data pipeline

183
00:19:41.000 --> 00:19:47.000
you can use cloud watch I'm going to
name-check an Australian company called
guerilla stack who also do stuff in this

184
00:19:47.000 --> 00:19:59.000
area so there are lots of options you
have turn stuff off please now another
little infrastructure one is cushioning

185
00:19:59.000 --> 00:20:05.000
now Casey is one of these weird things
in I tell don't if you guys have found
it but people are kind of afraid of

186
00:20:05.000 --> 00:20:11.000
caching it's like all it's a bit scary
and we didn't learn about it in
university and it's unfamiliar to us and

187
00:20:11.000 --> 00:20:17.000
you've got to preload caches on what if
the case turns off and all this good
stuff anyone it's worth investigating

188
00:20:17.000 --> 00:20:22.000
because beyond performance improvements
you can get and this white paper the
reason I've link that is that just gives

189
00:20:22.000 --> 00:20:28.000
you so much information way more i could
give you in this session you can save
ninety percent of your spanner in the

190
00:20:28.000 --> 00:20:35.000
hugs and again danger so think about it
if I've got a database that's a DB m
three large and it's doing 30,000 pie

191
00:20:35.000 --> 00:20:43.000
ops single easy so just one note and I'm
driving it hard and I flip it to an
elastic ash node it's an order of

192
00:20:43.000 --> 00:20:49.000
magnitude cheaper Wow and my customers
will probably be happier yes got to do a
little bit of work we're getting to the

193
00:20:49.000 --> 00:20:54.000
little bit of work zone but it's
something to think about the other
reason I mention it is for a lot of

194
00:20:54.000 --> 00:21:00.000
applications today they do provide a
drop in capability for things like Redis
and memcache and if you're not using

195
00:21:00.000 --> 00:21:07.000
them you should look into it because you
could save big so let's move into some
Mickey stuff the architectural

196
00:21:07.000 --> 00:21:14.000
optimization if you're an architect
sitting in this room today you are
unbelievably lucky you're as lucky as

197
00:21:14.000 --> 00:21:20.000
this gentleman here because this
gentleman is standing here he's got
levers to pull has me you can pull them

198
00:21:20.000 --> 00:21:27.000
down he can pull them up but it's
actually really cool with intelligent
decisions you can pull different levers

199
00:21:27.000 --> 00:21:33.000
and get different outcomes it's awesome
so what are some of the livers you could
pull well you can do code changes you

200
00:21:33.000 --> 00:21:38.000
could actually change code it's actually
the best way to fix stuff the number of
times I talk to customers are like well

201
00:21:38.000 --> 00:21:43.000
this application runs terribly and we
want to change the infrastructure so
well maybe you should just fix the

202
00:21:43.000 --> 00:21:49.000
application in the first place um so we
can do that you know and there are
architectural trade-offs to be made

203
00:21:49.000 --> 00:21:54.000
there are way more decisions and you
ever had to make before and on the one
hand that's challenging because you've

204
00:21:54.000 --> 00:21:59.000
got a kind of learn more but the flip
side is it's great because you've got
more choice and it can make better more

205
00:21:59.000 --> 00:22:06.000
finely honed decisions and you can test
them in real time to see if they make
sense you're not sitting there 12 months

206
00:22:06.000 --> 00:22:11.000
before deployment going on I think if I
use this kind of approach it'll be okay
you can say well I tried that approach

207
00:22:11.000 --> 00:22:17.000
it didn't work i'm going to spend a week
and change it to something
different and it's okay and it really is

208
00:22:17.000 --> 00:22:25.000
okay so let's talk about some of those
levers are some of those tricks you can
use who has a web tier no one has a web

209
00:22:25.000 --> 00:22:32.000
tier me by my web tier all got a web
chief to do something so did you know
you don't need to have web servers to

210
00:22:32.000 --> 00:22:38.000
host your web team because hosting web
servers is kind of boring unless you're
doing a truckload of madhuri rights and

211
00:22:38.000 --> 00:22:43.000
other stuff you're really just spending
most of your time patching feeding
upgrading and looking after it so one of

212
00:22:43.000 --> 00:22:49.000
the approaches a lot of customers have
start to take is to use s3 as their whip
too because s3 has this capability

213
00:22:49.000 --> 00:22:58.000
called static website hosting worst name
ever because it's not static you can run
JavaScript you could do cause you can

214
00:22:58.000 --> 00:23:05.000
host the AWS sdk near you could do a
whole bunch of active stuff from that
website and you're not patching it there

215
00:23:05.000 --> 00:23:11.000
are no service to manage there's no
scaling rules to worry about it just
works they may say about what does that

216
00:23:11.000 --> 00:23:19.000
cost me to run Simon well if we take an
average page and these days an average
page has 150 or more objects on it and

217
00:23:19.000 --> 00:23:25.000
the average size per page is exceeded to
Meg it's actually rapidly growing which
is interesting let's say we've got a

218
00:23:25.000 --> 00:23:34.000
popular website 100,000 page views a day
450 million gets nearly six terabytes of
data transfer I'm paying in Sydney 1130

219
00:23:34.000 --> 00:23:41.000
nine dollars and 43 cents per month for
that all day every day getting that
happening for me now remember our

220
00:23:41.000 --> 00:23:46.000
example will for about what it costs to
administer stuff what am i saving on
well I'm not patching web servers

221
00:23:46.000 --> 00:23:53.000
anymore not doing capacity planning not
having to worry so much about my
security scanning because the pipeline

222
00:23:53.000 --> 00:23:59.000
is much easier to scan as less surface
area my rollouts can be much easier I
could do better testing saving hours per

223
00:23:59.000 --> 00:24:10.000
month so let's get to something really
nifty that's our front end what excuse
i've been talking about to you since

224
00:24:10.000 --> 00:24:15.000
2011 without obvious customers and they
are awesome for decoupling and
availability and scaling or what sort of

225
00:24:15.000 --> 00:24:23.000
stuff but did you know you can use them
to manage costs yes you can let's work
an example here let's trigger our auto

226
00:24:23.000 --> 00:24:31.000
auto scaling groups based on a revenue
totally different model to think about
so we're going to work an example

227
00:24:31.000 --> 00:24:36.000
because it's always easy to work an
example to get these through so we have
an appt it's a mobile app I take photos

228
00:24:36.000 --> 00:24:42.000
because that's what I do and when I take
a photo gets stored in s3 and something
happens to it and I care not what that

229
00:24:42.000 --> 00:24:49.000
might be in our example we've got a
single em four large and that can
process one thousand images in an hour

230
00:24:49.000 --> 00:24:56.000
and I've got an agreement with my
customers it's a freemium service if you
don't pay for me you get your photo back

231
00:24:56.000 --> 00:25:00.000
when you get it back if you do pay for
it I'll get it back to you within 10
minutes because that's kind of how we

232
00:25:00.000 --> 00:25:07.000
roll so I have two auto scaling groups
here the auto scaling group at the top
to freak you so if I'm a free customer

233
00:25:07.000 --> 00:25:14.000
my metadata goes on to the freak you to
be processed and the auto scaling group
only spins up when I have a thousand

234
00:25:14.000 --> 00:25:20.000
pieces of work on that cube so I'm
maximizing my workload for that out i
like but i will wait an indeterminate

235
00:25:20.000 --> 00:25:29.000
time if though I'm a paid customer Mike
you use is a completely different metric
you may not be familiar with this metra

236
00:25:29.000 --> 00:25:36.000
because it only came out a little while
ago it's the approximate age of oldest
message so it tells you how aged your

237
00:25:36.000 --> 00:25:42.000
queue is remember a 10 minute SLA this
says if i'm lagging behind my ten
minutes spin up instances process away

238
00:25:42.000 --> 00:25:49.000
completely different behaviour of two
auto scaling groups based on different q
rules same customer base how does this

239
00:25:49.000 --> 00:25:56.000
look from a revenue perspective well
let's do an example two thousand
transactions come in half of them a free

240
00:25:56.000 --> 00:26:05.000
half owner a premium so we in the free
mode only spin up one instance for an
hour or we process those transactions so

241
00:26:05.000 --> 00:26:15.000
our cost is and here we start reading a
dot the zeros point ooo 336 per
transaction now if I'm processing on the

242
00:26:15.000 --> 00:26:20.000
pain cube though I have to spin up ten
instances to get the SLA that I want
based upon that through point so I'm

243
00:26:20.000 --> 00:26:28.000
paying point 00 2016 so again ordered
made the two different costs for my paid
versus my free people isn't it I now

244
00:26:28.000 --> 00:26:34.000
need to understand what am I charging my
free people nothing so that's a cost
that's burdened on my paid people what

245
00:26:34.000 --> 00:26:41.000
am I charging my paid people do I know
if I'm making money on any
customer what's the question to start

246
00:26:41.000 --> 00:26:47.000
bubbling in your head so let's see if we
can make this cheaper and better now
that we understand what our cost model

247
00:26:47.000 --> 00:26:53.000
is well one of the fundamental rules in
architecture is the less you have the
cheaper it is of a simpler it tends to

248
00:26:53.000 --> 00:27:00.000
be to operate the ultimate thing is the
thing that has no moving parts it's like
a block so what we want to do is want to

249
00:27:00.000 --> 00:27:06.000
simplify so I'm going to simplify by
moving us to a lambda basement model and
i'm going to show you the cost

250
00:27:06.000 --> 00:27:11.000
implication of this verse is just the
functionality thing so what are we done
here you can see there's no queues here

251
00:27:11.000 --> 00:27:17.000
and we've now like two buckets why do we
have two buckets well we're going to use
s3 events and I'll show you how to

252
00:27:17.000 --> 00:27:22.000
configure that surely but if we had the
one bucket and we're using s3 events
every time we did something to that

253
00:27:22.000 --> 00:27:27.000
object what would happen it would spin
off and try to do it again so now we
have two buckets we receive the image

254
00:27:27.000 --> 00:27:33.000
into one bucket do an s3 event that
triggers a lambda function to do my work
and then we store it to a secondary

255
00:27:33.000 --> 00:27:40.000
bucket now for our example I've taken
the worst-case scenario of how long it
takes to process my image I've given it

256
00:27:40.000 --> 00:27:44.000
the largest amount of memory I've gone
as hard as I could in terms of the
badness scale just to give you a

257
00:27:44.000 --> 00:27:50.000
realistic example and I'm now processing
my per transaction cost lots of 00 i'm
going to try and translate it for you in

258
00:27:50.000 --> 00:27:58.000
the reader to fifty three percent
savings I've hard my transaction cost
you take that to your business

259
00:27:58.000 --> 00:28:04.000
stakeholder and sage you know which art
we can now charge our customers fifty
percent less and be more competitive or

260
00:28:04.000 --> 00:28:10.000
we could take that money and invested in
a marketing campaign or we could give
them a 25-percent cost saving yeah it's

261
00:28:10.000 --> 00:28:15.000
up to you what you do with the money but
you're now processing better the other
thing you've done is you've taken the

262
00:28:15.000 --> 00:28:20.000
queuing out so not paying for that
although it was really negligible as
literally dollars for what we're talking

263
00:28:20.000 --> 00:28:27.000
about here the other thing I have
infected into this cost saving is you
get with lambda a free tier forever in

264
00:28:27.000 --> 00:28:34.000
this particular model that would give
enough 71,000 free transactions every
month before we even started paying for

265
00:28:34.000 --> 00:28:42.000
it that's pretty good what's the other
thing I've done here we've now
eliminated our 10-minute SLA Emily we

266
00:28:42.000 --> 00:28:48.000
now get people stuff almost
instantaneously and they're paying less
for it so how do we set up a s3

267
00:28:48.000 --> 00:28:52.000
notification well it's really tough to
can take you forever you know
you're basically a jump into here you

268
00:28:52.000 --> 00:28:57.000
can also do it through the command line
etc and you simply say hey I want to
create an image processor function that

269
00:28:57.000 --> 00:29:04.000
responds to a put request on a
particular bucket and triggers a lander
function wow that was hard I'm liking

270
00:29:04.000 --> 00:29:09.000
this new world it's so much easier than
it used to be now you may say a hi Simon
but the pricing you showed me for your

271
00:29:09.000 --> 00:29:17.000
paid tier is higher than your spot tier
isn't it I also yes it is but we can
double down on that we can have both so

272
00:29:17.000 --> 00:29:24.000
we can have the lambda function for our
page here because it gives us that
really nifty controllable SLA we can

273
00:29:24.000 --> 00:29:31.000
continue to optimize that if we want and
we could also apply all our newfound
spot knowledge to our free tier and

274
00:29:31.000 --> 00:29:38.000
drive that as low as possible to almost
zero so we can have our cake and eat it
too so this is how you can start to use

275
00:29:38.000 --> 00:29:47.000
queues based on economic performance now
you may say well Simon you've used the
easy examples it's all stateless just

276
00:29:47.000 --> 00:29:55.000
photos come on where's the data well I
agree databases make it hard databases
are always the trickiest part so here

277
00:29:55.000 --> 00:30:02.000
are some rules of thumb that you need to
think about firstly let's stop the
religious argument of relational versus

278
00:30:02.000 --> 00:30:09.000
no sequel the answer is both got to tell
you they suit different patterns
different workloads and you'll often

279
00:30:09.000 --> 00:30:17.000
find an opportunity to pull out a
particular component and put it into a
no sequel database and vice versa use

280
00:30:17.000 --> 00:30:25.000
caching liberally it is an awesome
pattern if you look at any large-scale
software development company that are

281
00:30:25.000 --> 00:30:33.000
delivering web scale applications they
have caching everywhere it's just normal
we need to take advantage of it more do

282
00:30:33.000 --> 00:30:38.000
not conflate your transactional database
with your analytical database the how
not one on the same there is a reason

283
00:30:38.000 --> 00:30:43.000
why redshift exists and there's a reason
why postgres exist and they're not for
the same reasons you need to separate

284
00:30:43.000 --> 00:30:50.000
the two and also most often there'll be
just a few hot spots in your databases
and these are the giveaways say aha

285
00:30:50.000 --> 00:30:55.000
that's the bit I need to migrate to
something more suitable for that
particular workload so it's not saying

286
00:30:55.000 --> 00:31:00.000
well this database performs terribly I'm
just going to move the whole thing to
Cassandra well that's not going to

287
00:31:00.000 --> 00:31:06.000
necessarily fix your problem need to
pick and choose
so when we pick and choose we use a

288
00:31:06.000 --> 00:31:12.000
dollar value as well as a performance
figure to calculate that so here's an
example of a data set it's a big data

289
00:31:12.000 --> 00:31:18.000
set three terabytes and it's running at
eighty percent read twenty percent right
pretty common work load pattern we see

290
00:31:18.000 --> 00:31:24.000
if I sit down and say you know what I'm
paying a lot for my multi AZ ideas for
my sequel to do this i'm spending almost

291
00:31:24.000 --> 00:31:32.000
five thousand dollars a month on it i
can simply move that data set to
DynamoDB i have to make some code

292
00:31:32.000 --> 00:31:38.000
changes remember these are some levers
were pulling but i know i'm getting an
almost 40% saving and probably a better

293
00:31:38.000 --> 00:31:44.000
performance profile so again i can
decide which levers to pull when it's
worth it now i'm not getting out of bed

294
00:31:44.000 --> 00:31:49.000
for less than five percent quite frankly
so you know we're going to have the
numbers higher here so this is over

295
00:31:49.000 --> 00:31:57.000
thirty percent so what's the point here
the point here is that architectures can
evolve they can change now what's one of

296
00:31:57.000 --> 00:32:01.000
the biggest challenges are talking to
anyone about the whole concept of
evolution I have young children we talk

297
00:32:01.000 --> 00:32:06.000
about evolution so why don't I ever see
anything change well because it takes
millions of years for something to

298
00:32:06.000 --> 00:32:11.000
change you're never going to see it it's
really frustrating we live in a
completely different world in IT look at

299
00:32:11.000 --> 00:32:17.000
this week for you guys how much has
changed here in this week there really
is usually it's good yeah things change

300
00:32:17.000 --> 00:32:24.000
really quickly we as architects and
developers need to take advantage of
this and evolve our systems really

301
00:32:24.000 --> 00:32:30.000
rapidly in response to the stimuli that
around in the world so I thought well
let's do a worked example of this and

302
00:32:30.000 --> 00:32:35.000
see how this can actually play out so I
thought let's build a micro servers
because microservices are cool or not

303
00:32:35.000 --> 00:32:42.000
yeah we like microservices so let's
build on so I thought let's build one to
help us find restrooms in Australia

304
00:32:42.000 --> 00:32:48.000
we're lucky we have some really good
open data sets do you provides one that
shows me all the public toilets in

305
00:32:48.000 --> 00:32:55.000
Australia by postcode awesome was it go
yeah handy tonics it let me tell ya I
was happy when I found it so I thought

306
00:32:55.000 --> 00:33:01.000
okay let's build that and you know I
thought well let's take a traditional
thought process I'm going to grab just a

307
00:33:01.000 --> 00:33:05.000
language I've never used python before
thought well I want to learn Python i'm
a developer so of course i'll choose the

308
00:33:05.000 --> 00:33:11.000
new shiny thing so i chose python bottle
is a framework my staple because i know
how to code in my sepal and it's just

309
00:33:11.000 --> 00:33:16.000
easy so i'll go ahead and build that so
i built a micro service so you can go
ahead and laugh my code

310
00:33:16.000 --> 00:33:22.000
well that's our stuff and basically all
these microservice does is something
easy takes in a postcode or a zip code

311
00:33:22.000 --> 00:33:27.000
you might call it and validates it they
can only be four digits in Australia so
it makes it nice and easy and then it

312
00:33:27.000 --> 00:33:36.000
runs a query against my RDS database and
says hey get me the list and return it
as a JSON payload pretty easy so i coded

313
00:33:36.000 --> 00:33:42.000
that up short nice about myself is all
we're going to deploy this particular
microservice well we tend to do what's

314
00:33:42.000 --> 00:33:48.000
familiar so I'm going to deploy it on to
ec2 and I'm not going to do it natively
I'm just going to go and use ice tea

315
00:33:48.000 --> 00:33:54.000
please talk so spin up elastic Beanstalk
and deploy that's going to give me some
awesome stuff it's going to give me a

316
00:33:54.000 --> 00:33:59.000
load balancer get in communion
auto-scaling group i'm highly available
i'm going to have a redundant ids

317
00:33:59.000 --> 00:34:07.000
cluster running underneath i'm looking
pretty good some downside there I don't
have any API protection no throttling no

318
00:34:07.000 --> 00:34:13.000
credentials no management still going to
roll my service for and do some patch
management although elastic Beanstalk

319
00:34:13.000 --> 00:34:19.000
hilts are what with that still got kind
of a heavy storage layer but you know
this does the job so let's see how it

320
00:34:19.000 --> 00:34:26.000
actually looks if you've never used
elastic beanstalk before is where we
have color and movement so this is eight

321
00:34:26.000 --> 00:34:30.000
times speed i'm calling it out because i
didn't want to have you sitting here for
a while because you know it takes time

322
00:34:30.000 --> 00:34:36.000
for instances to spin up but this is
deploying from my code base they're
doing an eb create and it's speeding up

323
00:34:36.000 --> 00:34:42.000
the elastic load balancer spinning up
the instances the auto scaling groups of
cloud watch rules etc I really like

324
00:34:42.000 --> 00:34:50.000
elastic be stopped because it does all
that stuff for me so this will spin up
it'll create all the resources and I'm a

325
00:34:50.000 --> 00:34:54.000
happy little camper and i'll show you
how it works surely we'll just let it
spin up you can see what i did at a time

326
00:34:54.000 --> 00:34:59.000
speed because i can't tap dance for as
long as this would have taken it takes a
few minutes because you know instances

327
00:34:59.000 --> 00:35:06.000
take time to spin up but in general
it'll do it in a few minutes and away we
go and boom we're done great so what

328
00:35:06.000 --> 00:35:16.000
does it actually do so if i type in my
URL and i do a slash postcode and then i
do a / 2008 sydney CBD there's all the

329
00:35:16.000 --> 00:35:24.000
bathrooms I do melbourne CBD where I'm
from 3000 my suburbs 3185 I'm pretty
comfortable this works does the job I'm

330
00:35:24.000 --> 00:35:32.000
happy with it great I could have stopped
there but evolution huh things
change so how do i evolved well what's

331
00:35:32.000 --> 00:35:38.000
cool that's what's useful what are
people like that I containers container
eyes we should contain their eyes so I

332
00:35:38.000 --> 00:35:42.000
thought well I'm not going to contain
her eyes I'll be lazy I'll get someone
in my office to contain the rise for me

333
00:35:42.000 --> 00:35:48.000
so Shane bore the channel is one of the
essays in our melbourne office said I'll
container eyes and he did he took my

334
00:35:48.000 --> 00:35:55.000
code as it was put it into ecs and
containerized it is even the docker file
for your reference super complicated so

335
00:35:55.000 --> 00:36:02.000
it was really good because we got to say
docker a lot it's fun saying dr. a lot
isn't it everyone feels good said don't

336
00:36:02.000 --> 00:36:08.000
get today and so what we've got here is
something that is pretty much the same
as what we had before the instances do

337
00:36:08.000 --> 00:36:15.000
spin up faster which is nice but I
haven't solved any of my other problems
really but I've evolved it to something

338
00:36:15.000 --> 00:36:20.000
a little more modern perhaps because i'm
using a lot of weight container catoon
my container better than maybe i could

339
00:36:20.000 --> 00:36:27.000
tune my application instances
particularly for such a lightweight
microservice but let's evolve let's

340
00:36:27.000 --> 00:36:35.000
continue to evolve its respond to
stimuli so let's lambda i's and put api
gateway on there as well so something

341
00:36:35.000 --> 00:36:43.000
I've taken a vast step forward I've said
you know what I'm over these servers I'm
over these containers I'm only going to

342
00:36:43.000 --> 00:36:50.000
use compute when I need to execute my
function and of course microservices fit
this model perfectly so no manly

343
00:36:50.000 --> 00:36:55.000
spending money when I'm doing stuff I'm
not patching servers anymore I'm not
having to do maintenance because you

344
00:36:55.000 --> 00:37:01.000
know the little secret of docker
containers you still have to patch them
kind of good to do I've never fully

345
00:37:01.000 --> 00:37:07.000
managed api throttling performance or
liquid stuff but I still got this big
storage layer down the bottom so the

346
00:37:07.000 --> 00:37:12.000
Wise Ones amongst you be going hard
that's that's where I'd be evolving next
because really you just got a big lookup

347
00:37:12.000 --> 00:37:16.000
table so I'm alive we got a sequel
database there and I'm is would be you'd
be surprised why people do the things

348
00:37:16.000 --> 00:37:23.000
they do often it's because it's what we
know it was super easy for me to set
that up so of course I did that first so

349
00:37:23.000 --> 00:37:34.000
let's take it to the end point and no
sequel eyes it so we introduced DynamoDB
and now we have no servers we have no

350
00:37:34.000 --> 00:37:40.000
containers we have no database to manage
we have a completely smooth line with
full availability completely tunable

351
00:37:40.000 --> 00:37:46.000
performance management
and control we now get to say serverless
a lot which is way cool insane daughter

352
00:37:46.000 --> 00:37:52.000
a lot isn't it because you can make
people angry because I but this servers
there there's really service behind it's

353
00:37:52.000 --> 00:37:57.000
funny well it's funny for me the
downside of this so I'll be totally
honest with you is that people get a bit

354
00:37:57.000 --> 00:38:03.000
concerned because I whoa less familiar
deployment model let's just ease up
there cowboy I don't know what's going

355
00:38:03.000 --> 00:38:08.000
on here I'm not used to deploying this
way you've got this crazy no sequel
database you're deploying these

356
00:38:08.000 --> 00:38:14.000
functions as a service are feeling
uncomfortable so I want to show you what
the code looks like and i want to show

357
00:38:14.000 --> 00:38:20.000
you how you can use existing frameworks
to deploy it okay so that's where we're
going with this evolution so here's what

358
00:38:20.000 --> 00:38:27.000
the new code looks like here's the new
code much like the old code what have I
done I've ripped out the my sequel calls

359
00:38:27.000 --> 00:38:32.000
that you could see there the cursor that
was there and I've replaced it with a
dynamo DB call so all I'm doing is

360
00:38:32.000 --> 00:38:39.000
connecting using the ADA best Python SDK
also known as boto into my DynamoDB
table I'm running a query I'm still

361
00:38:39.000 --> 00:38:47.000
iterating through the items and
responding to it so our message here is
that any component developer can convert

362
00:38:47.000 --> 00:38:55.000
from running a relational database to a
no sequel database it's not that hard so
I've done that here because I well you

363
00:38:55.000 --> 00:39:00.000
haven't solved my deployment issue so I
thought well it's a good question and
you know it would have been easier me to

364
00:39:00.000 --> 00:39:05.000
say well using Amazon deployment tool
like blah or X or whatever you say well
that's your ecosystem you're familiar so

365
00:39:05.000 --> 00:39:10.000
I said I didn't want to do that as I
said never used python before not
familiar with it so I looked for what

366
00:39:10.000 --> 00:39:15.000
are the sort of frameworks they get used
for deploying this kind of software and
I came across this one called zappa and

367
00:39:15.000 --> 00:39:22.000
it appealed to me because it's got such
a cool name you know is that moon unit
zappa is it Frank Zappa but sepa zep is

368
00:39:22.000 --> 00:39:28.000
a very popular open-source deployment
mechanism and I've got to say it is
really cool and what they did is I said

369
00:39:28.000 --> 00:39:36.000
we've got this deployment framework
we're going to just include the ability
to deploy to Amazon lambda awesome let's

370
00:39:36.000 --> 00:39:42.000
see what that looks like so what we do
is we do a deployment there's a
configuration file behind us with about

371
00:39:42.000 --> 00:39:48.000
three lines in it the lines are the
credentials I need to use the s3 bucket
at which environment i wanted to point

372
00:39:48.000 --> 00:39:54.000
to it's not that hard so we go ahead and
we deploy and this is the real time
video haven't sped this up

373
00:39:54.000 --> 00:40:01.000
zappa deployed prod and he goes ahead
and packages my project up for my laptop
that was in get and sends it up across

374
00:40:01.000 --> 00:40:09.000
what was a particularly poor
communication line at the time and it
starts to create the lambda function it

375
00:40:09.000 --> 00:40:15.000
creates a few health check rules for me
as well to keep it alive and running for
me which is nice it will also create a

376
00:40:15.000 --> 00:40:22.000
API gateway for me does all the plumbing
does all the IM roles for me everything
i didn't have to do anything it was

377
00:40:22.000 --> 00:40:27.000
really easy to setup which is what i
want to share this with you it also
shares one of those beautiful features

378
00:40:27.000 --> 00:40:33.000
of many tools which is the progress
meter that doesn't get to one hundred
percent don't we love those and it moves

379
00:40:33.000 --> 00:40:36.000
that if funny so this'll finish about
think it finished about ninety three
percent something like that but it goes

380
00:40:36.000 --> 00:40:43.000
along and the thing I do like is it does
say this step will take a bit a bit
being an interesting measure of time but

381
00:40:43.000 --> 00:40:50.000
this is real time so it's going ahead
and deploying deploying the API gateway
seen ninety-four percent it's good done

382
00:40:50.000 --> 00:41:00.000
I've deployed my micro service how cool
was that so let's go and see what it
looks like so again I can make a call

383
00:41:00.000 --> 00:41:11.000
but this time I'm curling the API
gateway / pride / postcode 2000 at
Sydney boom let's do melbourne boom

384
00:41:11.000 --> 00:41:21.000
let's do elsternwick through 185 boom
nothing changed but everything changed i
evolved how I deliver that output I'm

385
00:41:21.000 --> 00:41:29.000
doing it way cheaper way simpler way
more efficiently less deployment steps
I've evolved my architecture along the

386
00:41:29.000 --> 00:41:37.000
way can be done so that's all the good
what about the bad there are two
anti-patterns I want to share with you

387
00:41:37.000 --> 00:41:44.000
because these are things you should not
do and I want to encourage you not to do
please the first one is getting confused

388
00:41:44.000 --> 00:41:50.000
between high availability and cost
optimization and I see this happen all
the time particularly driven by product

389
00:41:50.000 --> 00:41:56.000
owners who say it's got to be as cheap
as possible and then you deploy on one
node and the node goes down and there's

390
00:41:56.000 --> 00:42:02.000
an agent I say but it was down and you
said well I said it would go there but
it has to be up all the time so it's a

391
00:42:02.000 --> 00:42:08.000
whole different conversation people so
what you want to do is model for
availability then cost but there is one

392
00:42:08.000 --> 00:42:17.000
the interesting trick you could do for
this in particular related to protecting
yourself against AZ interruption so if

393
00:42:17.000 --> 00:42:22.000
we have an application let's say we want
to always maintain 12 instances running
for our production load we need to

394
00:42:22.000 --> 00:42:31.000
deploy it in duplicate across multiple
az's with full capacity so we're never
affected this is a true H a architecture

395
00:42:31.000 --> 00:42:38.000
but there's a little mathematical trick
if you're deployed in a region that has
three or more azs so remember we're

396
00:42:38.000 --> 00:42:45.000
protecting against an availability zone
level disruption so in the top model
we've got to run 24 aggregate aggregate

397
00:42:45.000 --> 00:42:50.000
instances to protect ourselves in the
bottom model we only have to run 18 why
is that because I've only got to run 12

398
00:42:50.000 --> 00:42:57.000
at any one time so if I lose an AZ the
bottom one still has enough instances
running the top line still has enough

399
00:42:57.000 --> 00:43:03.000
instances running but to get there like
to spend twenty-five percent more so we
can immediately save twenty five percent

400
00:43:03.000 --> 00:43:10.000
on a h a configuration just by spreading
across three az's if you have them
available to you that is a simple

401
00:43:10.000 --> 00:43:16.000
configuration change in your auto
scaling group go ahead and do it
immediately less nodes having to run

402
00:43:16.000 --> 00:43:25.000
same aggregate workload the second
gotcha who here stores binary large
objects in their relational databases

403
00:43:25.000 --> 00:43:37.000
okay not many this happens a lot one of
the benefits of my role is I get to meet
with a lot of customers and I see a lot

404
00:43:37.000 --> 00:43:42.000
of commercial software and a lot of self
driven software and this happens
surprising amount so I'm just going to

405
00:43:42.000 --> 00:43:47.000
stand here and say do not do this it
makes your databases run really bad
really slow and they're very very

406
00:43:47.000 --> 00:43:54.000
expensive how expensive you may ask well
let me show you let's say we're storing
our blobs in a table we've got three

407
00:43:54.000 --> 00:44:02.000
rows in our table user ID image good and
a blob nice lazy programming way to do
things and each image is too Meg stored

408
00:44:02.000 --> 00:44:08.000
in my database and we're really
successful and I'm now got three million
rows I've also now got any least six

409
00:44:08.000 --> 00:44:15.000
terabyte database to manage which is
hard and painful and annoying and I'm
also spending 3279 dollars and fifty six

410
00:44:15.000 --> 00:44:22.000
cents per month to run this in a chain
mode with just standard storage so
thanks she if I architect

411
00:44:22.000 --> 00:44:28.000
is the way it should be architected what
would I do with my Bloods i would put
them in s3 wouldn't i that's where blobs

412
00:44:28.000 --> 00:44:35.000
belong and i simply change my table and
say point to where the blob resides and
have the code get it from there and now

413
00:44:35.000 --> 00:44:44.000
my database shrinks down to less than 6
gigabytes my storage cost is far lower
just to store that storage is just less

414
00:44:44.000 --> 00:44:49.000
than two hundred dollars and even with
all the gets and puts I could possibly
need it's just over two hundred dollars

415
00:44:49.000 --> 00:44:56.000
so my RDS cost goes down in my aggregate
cost has dropped and I've saved
42-percent just by doing things the

416
00:44:56.000 --> 00:45:04.000
right way the first time so make sure
you avoid that trap and if you see
commercial software that you use doing

417
00:45:04.000 --> 00:45:12.000
this have a stern talk with your
provider and encourage them to make it
more effective to run so we've covered a

418
00:45:12.000 --> 00:45:16.000
lots that I was ripped up in the
doughnuts and got to the goodness inside
this is a cruel slide before lunch I

419
00:45:16.000 --> 00:45:23.000
apologize but sorry but you know
hopefully they've got doughnuts but I
out of it and what I remind you is we're

420
00:45:23.000 --> 00:45:30.000
talking about here is a new domain for
architecture we are talking about the
economy of your architecture think about

421
00:45:30.000 --> 00:45:40.000
how to get the best outcome at the
lowest possible cost think about how to
change it all the time because you can

422
00:45:40.000 --> 00:45:48.000
change it based on economics and
understand what your transactional costs
is as everyone rushes for the door there

423
00:45:48.000 --> 00:45:56.000
is one more thing everyone in this
session today gets 30 days free trusted
advisor starting on the 6th December

424
00:45:56.000 --> 00:46:03.000
thank you for coming along today this is
my gift to you it will automatically
activate based upon the email address

425
00:46:03.000 --> 00:46:08.000
you sign up to re-invent to if you say
to me but Simon I use a different email
address give me your card and I'll have

426
00:46:08.000 --> 00:46:16.000
it activated on the address that you
want thank you so much for coming along
today please fill in your evaluation I'm
happy to answer any questions that
people might have but thank you